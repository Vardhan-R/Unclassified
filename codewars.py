# from built_modules import import_matrices as mat, import_vectors as vect
from copy import deepcopy
from manim import *
# from perlin_noise import PerlinNoise
from PIL import Image
from pynput.keyboard import Key
from pynput.mouse import Button
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
import collections, csv, math, matplotlib.pyplot as plt, numpy as np, pygame, pynput, random, shelve, time
# import encryption_and_decryption as end

# corner fill
# def corner_fill(square):
#     n = len(square)
#     sol = []
#     for i in range(n, 0, -1):
#         if not(i % 2):
#             for j in range(i - 1):
#                 sol.append(square[n - i][j])
#             for j in range(i):
#                 sol.append(square[j][-1])
#         else:
#             for j in range(i, 0, -1):
#                 sol.append(square[j][-2])
#             for j in range(i - 2, -1 ,-1):
#                 sol.append(square[1][j])
#     return sol
# print(corner_fill([
#   [4,  1, 10,  5],
#   [7,  8,  2, 16],
#   [15, 14, 3,  6],
#   [11, 9, 13, 12]
# ]))



# t_str = '\n.\n. .\n. . .\n. . . .\n. . . . .\n'
# print(len(((t_str.split('\n'))[-1]).split()) ** 2 / 2)
# print(t_str.split('\n'))
# print(len(((t_str.split('\n'))[-1]).split()))



# def func(s): return max([str(x) + " " + str(s.count(x)) for x in s])

# print(func("abc deffeabdgsgwgwwwwwwww"))
# print(random.choice(["a", "b"]))

# d = {2: 9, 4: 8, 3: 7}
# print(list(str(d.keys())[10: -1]))

# class Abc:
#     def __init__(self) -> None:
#         pass

# for i in range(-100, 101):
#     # print("asin(" + str(i / 100) + ") =",  math.asin(i / 100))
#     # print("acos(" + str(i / 100) + ") =",  math.acos(i / 100))
#     print("atan(" + str(i) + ") =",  math.atan(i))
#     print("atan2(" + str(i) + ",", str(i) +") =",  math.atan2(i, i))
#     print()

# def foo(fname, val):
#     print(fname(val))
# foo(max, [1, 2, 3])
# foo(min, [1, 2, 3])

# print(sorted(["B", "A"]) == ["A", "B"])

# def abc(a, b = 7, c = 8, d = 12):
	# print(2 * a * b * c * d)

# abc(a = 2, f = 5)
# temp_clr = []
# clr = []
# black = [0, 0, 0]
# for i in range(3):
#     temp_clr.append("")
#     temp_clr[i] = black.copy()
# for i in range(3):
#     # clr.append(temp_clr.copy())
#     clr.append("")
#     clr[i] = temp_clr.copy()
# new_clr = clr.copy()

# for i in range(3): print(new_clr[i], clr[i])
# clr[0][0][0] = 255
# for i in range(3): print(new_clr[i], clr[i])

# def fact(n):
#     if n <= 1:
#         return 1
#     return n * fact(n - 1)

# my_e = 0

# for i in range(1, 19):
#     for j in range(i):
#         my_e += round(1 / fact(j), 4)
#     print(i, math.e - round(my_e, 4))
#     my_e = 0

# options = [1, 2, 3, 4]
# s = 0
# print("Started.")
# for i in range(100000):
#     c = random.choice(options)
#     if c == 1: s += 4
#     else: s -= 1
# print(s)

# l = [1, 5, 9]
# l.pop()
# print(l)

# lst = []
# for i in range(97, 123):
#     lst.append(chr(i))
# print(lst)

# s = "abcdefghij"
# p = 3
# print(s[:-p], s[-p:])

# def abc():
#     return (0, 1)

# l = []
# print(l)
# l.append(abc())
# print(l)

# print(type(abc()) == list)

# l = [4, 2, 3, 1, 7, 9, 12, 1, 3, 2, 1]
# l.sort(reverse=True)
# print(l)

# t = []
# l = [100, 100, 100, 100, 99, 99, 99, 98, 98, 97, 97, 97, 97, 97, 96, 96, 96, 96, 95, 95, 95, 95, 95, 95, 95, 94, 94, 93, 91, 91, 91, 91, 91, 90, 89, 88, 88, 88, 87, 87, 87, 86, 84, 84, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 82, 80, 80, 78, 79, 79, 79, 79, 79, 79, 79, 79, 79, 78, 79, 80, 80, 79, 79, 80, 80, 80, 79, 78, 78, 78, 77, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 73, 74, 74] # a = 10
# l = [500, 498, 496, 494, 491, 490, 487, 483, 480, 479, 479, 478, 476, 473, 472, 471, 467, 461, 462, 458, 454, 452, 451, 452, 449, 445, 443, 442, 442, 443, 444, 442, 440, 437, 435, 435, 434, 431, 428, 426, 424, 424, 424, 423, 420, 419, 418, 418, 417, 419, 418, 416, 412, 409, 408, 402, 401, 400, 397, 394, 393, 388, 389, 388, 390, 389, 388, 387, 384, 382, 383, 381, 379, 379, 379, 375, 374, 372, 372, 370, 372, 371, 369, 369, 368, 365, 364, 362, 362, 362, 360, 362, 363, 361, 361, 361, 362, 362, 362, 361] # a = 10
# l = [500, 500, 493, 484, 482, 476, 474, 472, 471, 470, 468, 465, 465, 459, 458, 455, 452, 446, 447, 441, 437, 435, 431, 430, 427, 425, 422, 421, 421, 419, 415, 414, 412, 412, 406, 404, 403, 401, 401, 401, 397, 397, 395, 393, 391, 385, 380, 379, 377, 376, 377, 375, 373, 371, 370, 370, 365, 363, 361, 360, 358, 354, 352, 350, 348, 346, 343, 342, 341, 337, 339, 337, 335, 335, 332, 331, 332, 327, 325, 323, 319, 315, 316, 315, 315, 312, 313, 312, 311, 307, 305, 306, 306, 306, 304, 302, 302, 299, 294, 296, 296, 296, 297, 296, 293, 292, 292, 289, 290, 287, 287, 290, 290, 293, 296, 296, 293, 289, 288, 290, 289, 290, 289, 289, 292, 294, 293, 293, 296, 297, 294, 293, 294, 293, 292, 291, 292, 295, 297, 297, 296, 297, 296, 300, 298, 299, 300, 300, 300, 301, 302, 303, 303, 301, 300, 300, 301, 300, 301, 301, 299, 296, 294, 296, 296, 294, 294, 295, 296, 301, 303, 303, 303, 303, 302, 302, 303, 307, 309, 311, 311, 310, 310, 315, 317, 319, 318, 318, 319, 320, 320, 320, 320, 319, 319, 318, 320, 318, 318, 318] # a = 100
# l = [500, 498, 496, 494, 487, 486, 480, 477, 475, 473, 471, 469, 465, 465, 463, 460, 457, 458, 454, 450, 446, 442, 441, 440, 438, 436, 434, 434, 435, 434, 433, 431, 428, 425, 423, 423, 423, 423, 422, 420, 418, 418, 417, 417, 417, 413, 411, 408, 405, 402, 399, 395, 393, 393, 390, 391, 388, 389, 385, 381, 381, 379, 379, 379, 380, 376, 372, 371, 370, 370, 372, 370, 368, 364, 362, 359, 352, 353, 351, 349, 350, 348, 350, 349, 348, 344, 345, 343, 342, 338, 339, 338, 340, 336, 338, 335, 335, 331, 328, 328, 327, 326, 321, 319, 319, 320, 319, 318, 311, 307, 307, 306, 305, 306, 305, 306, 305, 304, 299, 300, 299, 301, 300, 300, 302, 300, 301, 299, 302, 298, 299, 300, 302, 303, 304, 300, 299, 297, 296, 296, 295, 293, 293, 292, 295, 298, 301, 302, 302, 304, 304, 305, 304, 305, 303, 305, 306, 305, 307, 307, 307, 306, 308, 308, 305, 303, 303, 301, 298, 298, 300, 301, 301, 300, 300, 298, 299, 299, 298, 297, 296, 297, 300, 300, 297, 298, 298, 301, 301, 298, 296, 296, 294, 294, 293, 294, 298, 300, 300, 301] # a = 100
# l = [500, 500, 497, 494, 493, 492, 490, 486, 484, 481, 479, 477, 471, 468, 466, 466, 464, 459, 457, 457, 456, 455, 454, 451, 449, 447, 444, 444, 443, 442, 440, 439, 434, 433, 433, 432, 430, 427, 427, 424, 424, 422, 421, 418, 418, 418, 414, 410, 407, 406, 405, 402, 400, 399, 399, 398, 393, 390, 389, 388, 387, 385, 385, 383, 378, 377, 374, 372, 370, 366, 360, 355, 355, 352, 352, 351, 348, 347, 343, 340, 339, 339, 337, 334, 333, 331, 330, 329, 328, 328, 325, 324, 321, 320, 320, 318, 318, 318, 318, 317, 317] # a = width = 600
# l = [500, 499, 497, 493, 492, 491, 489, 489, 487, 487, 487, 483, 479, 476, 475, 475, 472, 470, 470, 469, 468, 464, 460, 456, 453, 450, 449, 448, 447, 447, 444, 443, 443, 439, 438, 433, 429, 429, 427, 424, 422, 419, 417, 416, 414, 412, 411, 410, 408, 407, 405, 403, 402, 401, 400, 398, 395, 395, 394, 393, 393, 391, 389, 388, 387, 385, 385, 384, 380, 377, 375, 374, 371, 369, 368, 367, 366, 366, 365, 363, 361, 359, 357, 354, 353, 353, 352, 352, 350, 348, 347, 346, 344, 343, 342, 342, 340, 339, 338, 338, 335, 334, 334, 334, 333, 332, 330, 329, 327, 326, 326, 323, 322, 319, 317, 316, 316, 316, 314, 311, 311, 310, 307, 307, 307, 306, 305, 303, 302, 300, 300, 299, 297, 296, 294, 292, 291, 291, 288, 287, 283, 279, 277, 276, 274, 272, 272, 271, 269, 269, 268, 266, 264, 262, 260, 260, 260, 259, 258, 256, 256, 255, 255, 253, 251, 248, 246, 245, 245, 245, 243, 243, 242, 241, 240, 240, 240, 241, 239, 238, 236, 236, 236, 237, 233, 232, 230, 230, 230, 230, 230, 229, 229, 229, 230, 229, 229, 232, 233, 235, 235, 234, 235, 234, 234, 233, 232, 231, 231, 231, 230, 228, 226, 226, 225, 225, 227, 228, 228, 228, 227, 227, 229, 229, 228, 226, 227, 227, 228, 227, 228, 226, 227, 227, 227, 229, 232, 231, 232, 231, 231, 232, 234, 229, 230, 229, 229, 229, 229, 230, 231, 230, 230, 230, 229, 231, 233, 233, 233, 232, 232, 232, 231, 231, 231, 232, 232, 231, 231, 231, 229, 229, 231, 229, 228, 229, 230, 231, 231, 231, 231, 233, 237, 237, 239, 240, 242, 241, 241, 241, 241, 241, 242, 245, 245, 247, 248, 247, 249, 252, 251, 256, 257, 257, 258, 257, 257, 260, 260, 262, 263, 263, 263, 262, 263, 264, 264, 266, 266, 268, 268, 270, 270, 272, 272, 273, 273, 273, 275, 277, 277, 278, 278, 277, 279, 280, 278, 279, 284, 284, 287, 288, 288, 288, 286, 284, 285, 285, 285, 285, 284, 284, 284, 284, 284, 285, 286, 284, 283, 283, 284, 285, 286, 287, 287, 288, 288, 288, 289, 291, 292, 291, 291, 288, 287, 286, 286, 285, 284, 281, 282, 281, 281, 281, 281, 281, 281, 279, 279, 280, 279, 280, 280, 279, 280, 280, 281, 282, 283, 284, 283, 284, 283, 281, 281, 280, 279, 279, 279, 279, 276, 272, 270, 270, 269, 272, 271, 273, 273, 272, 272, 273, 271, 270, 269, 267, 268, 266, 265, 269, 268, 267, 268, 267, 265, 266, 267, 267, 266, 266, 264, 264, 264, 266, 265, 265, 264, 264, 264, 264, 263, 263, 263, 263, 262, 263, 263, 263, 263, 261, 259, 261, 261, 261, 258, 257, 258, 257, 258, 258, 256, 254, 254, 253, 253, 251, 250, 250, 251, 249, 247, 247, 247, 248, 247, 248, 250, 250, 247, 247, 246, 245, 246, 245, 245, 246, 245, 245, 244, 242, 243] # a = width = 600
# for i in range(len(l)):
#     t.append(i)
# plt.plot(t, l, 'ro')
# plt.xlabel("x-axis")
# plt.ylabel("y-axis")
# plt.show()

# d = {0 : 0.36, 1 : 0.9, 2 : 0.1, 3 : 1}
# for i in d:
#     print(i)

# def abc(a):
#     if a:
#         return 123
#     print("pass")

# print(abc(1))

# pygame.init()

# width = 800
# height = 600
# running = True
# black = (0, 0, 0)
# red = (255, 0, 0)
# green = (0, 255, 0)
# blue = (0, 0, 255)
# a = vect.Vector(300, 60)
# b = vect.Vector(650, 200)
# c = vect.Vector(400, 500)
# r = vect.Vector(60, -80)
# prev_state = {"w": False, "a": False, "s": False, "d": False, "q": False, "e": False}

# scrn = pygame.display.set_mode((width, height))

# def getDist():
#     temp_a = vect.sub(b, c)
#     temp_b = vect.sub(a, c)
#     temp_c = vect.sub(a, b)
#     round(vect.angBetween(r, temp_a) + vect.angBetween(r, temp_b), 5), round(vect.angBetween(temp_a, temp_b), 5)
#     if round(vect.angBetween(temp_a, temp_b), 5) == round(vect.angBetween(r, temp_a) + vect.angBetween(r, temp_b), 5):
#         a_cross_b = vect.cross(temp_a, temp_b).mag()
#         x = a_cross_b / vect.cross(temp_c, r.normalise()).mag()
#         return [True, x]
#     else:
#         return [False]

# sens = 900

# while running:
#     scrn.fill(black)

#     for event in pygame.event.get():
#         if event.type == pygame.QUIT:
#             running = False

#         if event.type == pygame.KEYDOWN:
#             if pygame.key.name(event.key) == "w":
#                 c.y -= 1
#                 prev_state["w"] = True
#             if pygame.key.name(event.key) == "a":
#                 c.x -= 1
#                 prev_state["a"] = True
#             if pygame.key.name(event.key) == "s":
#                 c.y += 1
#                 prev_state["s"] = True
#             if pygame.key.name(event.key) == "d":
#                 c.x += 1
#                 prev_state["d"] = True
#             if pygame.key.name(event.key) == "q":
#                 r = r.rotate(-math.pi / sens)
#                 prev_state["q"] = True
#             if pygame.key.name(event.key) == "e":
#                 r = r.rotate(math.pi / sens)
#                 prev_state["e"] = True

#         if event.type == pygame.KEYUP:
#             if pygame.key.name(event.key) == "w":
#                 prev_state["w"] = False
#             if pygame.key.name(event.key) == "a":
#                 prev_state["a"] = False
#             if pygame.key.name(event.key) == "s":
#                 prev_state["s"] = False
#             if pygame.key.name(event.key) == "d":
#                 prev_state["d"] = False
#             if pygame.key.name(event.key) == "q":
#                 prev_state["q"] = False
#             if pygame.key.name(event.key) == "e":
#                 prev_state["e"] = False
#             getDist()

#     if prev_state["w"]:
#         c.y -= 1
#     if prev_state["a"]:
#         c.x -= 1
#     if prev_state["s"]:
#         c.y += 1
#     if prev_state["d"]:
#         c.x += 1
#     if prev_state["q"]:
#         r = r.rotate(-math.pi / sens)
#     if prev_state["e"]:
#         r = r.rotate(math.pi / sens)

#     pygame.draw.circle(scrn, blue, (a.x, a.y), 2)
#     pygame.draw.circle(scrn, blue, (b.x, b.y), 2)
#     pygame.draw.circle(scrn, blue, (c.x, c.y), 2)
#     pygame.draw.line(scrn, green, (a.x, a.y), (b.x, b.y))
#     pygame.draw.line(scrn, green, (b.x, b.y), (c.x, c.y))
#     pygame.draw.line(scrn, green, (c.x, c.y), (a.x, a.y))

#     temp = vect.add(c, r)
#     pygame.draw.line(scrn, red, (c.x, c.y), (temp.x, temp.y))

#     pygame.display.update()

# pygame.quit()

# d = {12 : 0.36, 13 : 0.9, 24 : 0.1, 37 : 1}
# d.pop(12)
# print(d)

# for i in str(102319382):
#     print(i, type(i))

# dataset_file = open("datasets/shapes_ai_datasets/circ_pts.txt", 'r')
# temp = dataset_file.readlines()
# print(temp, len(temp[0]))
# print(temp[0], temp[0][:-1])
# print(temp[0][:-2])
# dataset_file.close()

# for i in range (20):
#     print("\draw[red, fill = red]", (random.randint(3, 57) / 10, random.randint(3, 57) / 10), "circle (0.1);")

# lst = [1, 2, 3]
# lst.reverse()
# print(lst)

# lst_x_a = []
# lst_x_b = []

# lst_y_1 = [0.9, 0.9, 0.9, 0.9090909090909091, 0.9090909090909091, 0.9, 0.9, 0.9, 0.8910891089108911, 0.8910891089108911, 0.8910891089108911, 0.8910891089108911, 0.8823529411764706, 0.8823529411764706, 0.8823529411764706, 0.8823529411764706, 0.8823529411764706, 0.8823529411764706, 0.8653846153846154, 0.8653846153846154, 0.8653846153846154, 0.8571428571428571, 0.8571428571428571, 0.8571428571428571, 0.8571428571428571, 0.8571428571428571, 0.8411214953271028, 0.8411214953271028, 0.8411214953271028, 0.8411214953271028, 0.8490566037735849, 0.8490566037735849, 0.8411214953271028, 0.8411214953271028, 0.8411214953271028, 0.8411214953271028, 0.8333333333333334, 0.8333333333333334, 0.8256880733944955, 0.8256880733944955, 0.8256880733944955, 0.8256880733944955, 0.8256880733944955, 0.8181818181818182, 0.8181818181818182, 0.8035714285714286, 0.7964601769911505, 0.7894736842105263, 0.7894736842105263, 0.782608695652174, 0.782608695652174, 0.782608695652174, 0.7758620689655172, 0.7758620689655172, 0.7758620689655172, 0.7692307692307693, 0.7692307692307693, 0.7758620689655172, 0.7758620689655172, 0.782608695652174, 0.7758620689655172, 0.7758620689655172, 0.7758620689655172, 0.7758620689655172, 0.7758620689655172, 0.7758620689655172, 0.7758620689655172, 0.7758620689655172, 0.7758620689655172, 0.7758620689655172, 0.7692307692307693, 0.7627118644067796, 0.7627118644067796, 0.7627118644067796, 0.7627118644067796, 0.7692307692307693, 0.7692307692307693, 0.7627118644067796, 0.7692307692307693, 0.7692307692307693, 0.7627118644067796, 0.7627118644067796, 0.7627118644067796, 0.75, 0.743801652892562, 0.75, 0.75, 0.7563025210084033, 0.7563025210084033, 0.75, 0.75, 0.7563025210084033, 0.7563025210084033, 0.7563025210084033, 0.75, 0.75, 0.7692307692307693, 0.7627118644067796, 0.7627118644067796, 0.7563025210084033, 0.7627118644067796, 0.7627118644067796, 0.743801652892562, 0.75, 0.7377049180327869, 0.75, 0.75, 0.75, 0.7563025210084033, 0.743801652892562, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.7563025210084033, 0.7627118644067796, 0.7563025210084033, 0.7563025210084033, 0.743801652892562, 0.743801652892562, 0.7377049180327869, 0.7377049180327869, 0.7377049180327869, 0.75, 0.75, 0.7563025210084033, 0.75, 0.7563025210084033, 0.7563025210084033, 0.75, 0.7563025210084033, 0.7377049180327869, 0.7377049180327869, 0.7377049180327869, 0.7317073170731707, 0.743801652892562, 0.7317073170731707, 0.743801652892562, 0.7377049180327869, 0.743801652892562, 0.7377049180327869, 0.743801652892562, 0.75, 0.7563025210084033, 0.7627118644067796, 0.7627118644067796, 0.7627118644067796, 0.7563025210084033, 0.75, 0.7563025210084033, 0.75, 0.743801652892562, 0.75, 0.743801652892562, 0.75, 0.75, 0.75, 0.7563025210084033, 0.7377049180327869, 0.75, 0.7377049180327869, 0.743801652892562, 0.7317073170731707, 0.7317073170731707, 0.7317073170731707, 0.7317073170731707, 0.7317073170731707, 0.7317073170731707, 0.7317073170731707, 0.72, 0.72, 0.7258064516129032, 0.7258064516129032, 0.7258064516129032, 0.7258064516129032, 0.7258064516129032, 0.7258064516129032, 0.7258064516129032, 0.7258064516129032, 0.72, 0.72, 0.72, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7086614173228346, 0.7142857142857143, 0.7086614173228346, 0.7086614173228346, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.72, 0.72, 0.7142857142857143, 0.7142857142857143, 0.703125, 0.703125, 0.703125, 0.703125, 0.7086614173228346, 0.703125, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.703125, 0.703125, 0.703125, 0.703125, 0.6923076923076923, 0.6923076923076923, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.703125, 0.703125, 0.703125, 0.703125, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.6923076923076923, 0.6976744186046512, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6818181818181818, 0.6870229007633588, 0.6870229007633588, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6923076923076923, 0.6923076923076923, 0.703125, 0.703125, 0.703125, 0.703125, 0.703125, 0.703125, 0.703125, 0.703125, 0.703125, 0.703125, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6870229007633588, 0.6923076923076923, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6870229007633588, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6976744186046512, 0.7142857142857143, 0.7142857142857143, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.703125, 0.703125, 0.7142857142857143, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7086614173228346, 0.703125, 0.703125, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6870229007633588, 0.6923076923076923, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.703125, 0.703125, 0.703125, 0.703125, 0.703125, 0.703125, 0.703125, 0.7086614173228346, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.6976744186046512, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.703125, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.72, 0.72, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.703125, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.703125, 0.703125, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.703125, 0.703125, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6976744186046512, 0.6976744186046512, 0.703125, 0.7086614173228346, 0.703125, 0.703125, 0.703125, 0.703125, 0.703125, 0.703125, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.703125, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.703125, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.703125, 0.703125, 0.6923076923076923, 0.6870229007633588, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.7086614173228346, 0.7086614173228346, 0.7142857142857143, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.7142857142857143, 0.7142857142857143, 0.72, 0.72, 0.7317073170731707, 0.7317073170731707, 0.7317073170731707, 0.7258064516129032, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.72, 0.72, 0.72, 0.72, 0.72, 0.7258064516129032, 0.7258064516129032, 0.72, 0.72, 0.7142857142857143, 0.7086614173228346, 0.703125, 0.703125, 0.703125, 0.703125, 0.703125, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6923076923076923, 0.6923076923076923, 0.6818181818181818, 0.6818181818181818, 0.6818181818181818, 0.6766917293233082] # normal case (50000 iterations and 500 measurments)

# lst_y_2 = [0.9, 0.8910891089108911, 0.9, 0.89, 0.89, 0.89, 0.89, 0.89, 0.89, 0.89, 0.89, 0.89, 0.89, 0.88, 0.88, 0.8888888888888888, 0.88, 0.88, 0.8712871287128713, 0.8787878787878788, 0.8787878787878788, 0.8787878787878788, 0.8787878787878788, 0.87, 0.8787878787878788, 0.87, 0.86, 0.86, 0.8686868686868687, 0.8686868686868687, 0.8686868686868687, 0.86, 0.86, 0.8686868686868687, 0.86, 0.86, 0.8514851485148515, 0.84, 0.84, 0.8235294117647058, 0.8235294117647058, 0.82, 0.82, 0.82, 0.82, 0.82, 0.82, 0.81, 0.8181818181818182, 0.81, 0.81, 0.81, 0.81, 0.8080808080808081, 0.8080808080808081, 0.8163265306122449, 0.8163265306122449, 0.8163265306122449, 0.8163265306122449, 0.8163265306122449, 0.8163265306122449, 0.8080808080808081, 0.8080808080808081, 0.8163265306122449, 0.8163265306122449, 0.8163265306122449, 0.8163265306122449, 0.8163265306122449, 0.8080808080808081, 0.8080808080808081, 0.8, 0.8080808080808081, 0.8080808080808081, 0.8, 0.8, 0.8163265306122449, 0.8163265306122449, 0.8163265306122449, 0.8080808080808081, 0.8080808080808081, 0.8080808080808081, 0.8080808080808081, 0.8080808080808081, 0.8080808080808081, 0.8080808080808081, 0.8080808080808081, 0.8163265306122449, 0.8163265306122449, 0.8080808080808081, 0.8080808080808081, 0.8080808080808081, 0.8080808080808081, 0.8080808080808081, 0.8080808080808081, 0.8080808080808081, 0.8080808080808081, 0.8080808080808081, 0.8163265306122449, 0.8080808080808081, 0.8, 0.8, 0.7920792079207921, 0.8, 0.8, 0.8, 0.8, 0.8, 0.79, 0.7821782178217822, 0.78, 0.7959183673469388, 0.7959183673469388, 0.7959183673469388, 0.7959183673469388, 0.7878787878787878, 0.78, 0.7878787878787878, 0.78, 0.78, 0.78, 0.78, 0.77, 0.77, 0.77, 0.77, 0.77, 0.77, 0.76, 0.75, 0.7575757575757576, 0.7575757575757576, 0.75, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.75, 0.75, 0.7352941176470589, 0.74, 0.74, 0.74, 0.74, 0.74, 0.73, 0.73, 0.72, 0.72, 0.72, 0.72, 0.72, 0.71, 0.7244897959183674, 0.7244897959183674, 0.7244897959183674, 0.7171717171717171, 0.7171717171717171, 0.71, 0.7171717171717171, 0.7171717171717171, 0.7244897959183674, 0.7319587628865979, 0.7319587628865979, 0.7319587628865979, 0.7244897959183674, 0.7171717171717171, 0.7244897959183674, 0.7244897959183674, 0.7244897959183674, 0.7244897959183674, 0.7319587628865979, 0.7319587628865979, 0.7244897959183674, 0.7171717171717171, 0.7244897959183674, 0.7244897959183674, 0.7244897959183674, 0.7244897959183674, 0.7244897959183674, 0.7171717171717171, 0.7171717171717171, 0.7171717171717171, 0.7171717171717171, 0.7171717171717171, 0.7171717171717171, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.7171717171717171, 0.7171717171717171, 0.7171717171717171, 0.7171717171717171, 0.71, 0.69, 0.69, 0.68, 0.6868686868686869, 0.6868686868686869, 0.6868686868686869, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.67, 0.6633663366336634, 0.67, 0.67, 0.67, 0.6633663366336634, 0.67, 0.6767676767676768, 0.6767676767676768, 0.67, 0.67, 0.67, 0.6767676767676768, 0.6767676767676768, 0.6767676767676768, 0.6767676767676768, 0.6767676767676768, 0.6836734693877551, 0.6836734693877551, 0.67, 0.6633663366336634, 0.66, 0.65, 0.65, 0.65, 0.65, 0.6565656565656566, 0.65, 0.65, 0.65, 0.65, 0.6435643564356436, 0.64, 0.6464646464646465, 0.6464646464646465, 0.64, 0.6464646464646465, 0.6464646464646465, 0.6464646464646465, 0.64, 0.64, 0.6336633663366337, 0.6237623762376238, 0.62, 0.62, 0.62, 0.62, 0.62, 0.61, 0.6, 0.6, 0.6, 0.6, 0.594059405940594, 0.6, 0.6, 0.59, 0.5959595959595959, 0.5959595959595959, 0.5959595959595959, 0.5959595959595959, 0.5959595959595959, 0.5959595959595959, 0.5959595959595959, 0.5959595959595959, 0.59, 0.59, 0.5841584158415841, 0.5841584158415841, 0.5858585858585859, 0.5858585858585859, 0.5858585858585859, 0.5858585858585859, 0.58, 0.58, 0.58, 0.58, 0.58, 0.58, 0.58, 0.58, 0.58, 0.58, 0.58, 0.5858585858585859, 0.5858585858585859, 0.5918367346938775, 0.5918367346938775, 0.5918367346938775, 0.5858585858585859, 0.5918367346938775, 0.5918367346938775, 0.5858585858585859, 0.5858585858585859, 0.58, 0.5858585858585859, 0.58, 0.5858585858585859, 0.5858585858585859, 0.5918367346938775, 0.5918367346938775, 0.5858585858585859, 0.5858585858585859, 0.5858585858585859, 0.58, 0.58, 0.58, 0.58, 0.58, 0.57, 0.57, 0.57, 0.57, 0.57, 0.57, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5816326530612245, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5816326530612245, 0.5816326530612245, 0.59375, 0.5876288659793815, 0.5816326530612245, 0.5757575757575758, 0.5816326530612245, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.5757575757575758, 0.57, 0.5757575757575758, 0.5757575757575758, 0.57, 0.5757575757575758, 0.57, 0.5643564356435643, 0.57, 0.57, 0.57, 0.57, 0.57, 0.57, 0.5757575757575758, 0.57, 0.57, 0.57, 0.57, 0.5643564356435643, 0.56, 0.56, 0.5656565656565656, 0.56, 0.56, 0.5445544554455446, 0.55, 0.55, 0.5555555555555556, 0.5555555555555556, 0.5612244897959183, 0.5612244897959183, 0.5612244897959183, 0.5612244897959183, 0.5555555555555556, 0.55, 0.55, 0.55, 0.5555555555555556, 0.5555555555555556, 0.5555555555555556, 0.5555555555555556, 0.5555555555555556, 0.55, 0.55, 0.5555555555555556, 0.55, 0.55, 0.55, 0.5392156862745098, 0.5346534653465347, 0.53, 0.53, 0.53, 0.5353535353535354, 0.5408163265306123, 0.5408163265306123, 0.5408163265306123, 0.5520833333333334, 0.5463917525773195, 0.5463917525773195, 0.5408163265306123, 0.5463917525773195, 0.5353535353535354, 0.5408163265306123, 0.5408163265306123, 0.5408163265306123, 0.5353535353535354, 0.5353535353535354, 0.5353535353535354, 0.5353535353535354, 0.53, 0.53, 0.53, 0.53, 0.53, 0.5353535353535354, 0.5408163265306123, 0.5408163265306123, 0.5408163265306123, 0.5408163265306123, 0.5408163265306123, 0.5408163265306123, 0.5353535353535354, 0.5408163265306123, 0.5353535353535354, 0.5408163265306123, 0.5408163265306123, 0.5408163265306123, 0.5408163265306123, 0.5408163265306123, 0.5408163265306123, 0.5463917525773195, 0.5353535353535354, 0.5408163265306123, 0.5408163265306123, 0.5463917525773195, 0.5408163265306123, 0.5463917525773195, 0.5520833333333334, 0.5520833333333334, 0.5520833333333334, 0.5520833333333334, 0.5520833333333334, 0.5638297872340425, 0.5698924731182796, 0.5638297872340425, 0.5638297872340425, 0.5638297872340425, 0.5638297872340425, 0.5638297872340425, 0.5638297872340425, 0.5578947368421052, 0.5578947368421052, 0.5638297872340425, 0.5698924731182796, 0.5698924731182796, 0.5698924731182796, 0.5638297872340425, 0.5638297872340425, 0.5638297872340425, 0.5638297872340425, 0.5638297872340425, 0.5638297872340425, 0.5638297872340425, 0.5638297872340425, 0.5638297872340425, 0.5638297872340425, 0.5760869565217391, 0.5760869565217391, 0.5760869565217391, 0.5760869565217391, 0.5824175824175825, 0.5638297872340425, 0.5638297872340425, 0.5698924731182796, 0.5698924731182796] # special case (50000 iterations and 500 measurments)

# lst_y_3 = [0.9, 0.9, 0.8910891089108911, 0.8653846153846154, 0.8490566037735849, 0.8411214953271028, 0.8411214953271028, 0.8333333333333334, 0.8333333333333334, 0.8333333333333334, 0.8333333333333334, 0.8256880733944955, 0.8256880733944955, 0.8256880733944955, 0.8108108108108109, 0.8108108108108109, 0.8108108108108109, 0.7964601769911505, 0.7894736842105263, 0.782608695652174, 0.7758620689655172, 0.782608695652174, 0.7758620689655172, 0.7758620689655172, 0.7692307692307693, 0.7692307692307693, 0.7692307692307693, 0.7627118644067796, 0.7627118644067796, 0.7317073170731707, 0.743801652892562, 0.75, 0.75, 0.75, 0.75, 0.743801652892562, 0.743801652892562, 0.75, 0.75, 0.7377049180327869, 0.743801652892562, 0.743801652892562, 0.7377049180327869, 0.75, 0.743801652892562, 0.75, 0.7563025210084033, 0.75, 0.7563025210084033, 0.7563025210084033, 0.7563025210084033, 0.7563025210084033, 0.7563025210084033, 0.75, 0.75, 0.743801652892562, 0.7317073170731707, 0.7317073170731707, 0.7317073170731707, 0.7377049180327869, 0.7377049180327869, 0.7377049180327869, 0.7377049180327869, 0.7377049180327869, 0.7258064516129032, 0.7258064516129032, 0.7258064516129032, 0.7258064516129032, 0.7086614173228346, 0.7086614173228346, 0.7142857142857143, 0.72, 0.72, 0.72, 0.7086614173228346, 0.703125, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6976744186046512, 0.703125, 0.703125, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.7142857142857143, 0.7142857142857143, 0.6976744186046512, 0.703125, 0.703125, 0.7142857142857143, 0.703125, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.703125, 0.7086614173228346, 0.7086614173228346, 0.7142857142857143, 0.7258064516129032, 0.72, 0.7086614173228346, 0.703125, 0.703125, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6818181818181818, 0.6818181818181818, 0.6766917293233082, 0.6818181818181818, 0.6818181818181818, 0.6716417910447762, 0.6766917293233082, 0.6766917293233082, 0.6716417910447762, 0.6666666666666666, 0.6666666666666666, 0.6617647058823529, 0.6617647058823529, 0.6617647058823529, 0.656934306569343, 0.6474820143884892, 0.6474820143884892, 0.6521739130434783, 0.6521739130434783, 0.6521739130434783, 0.656934306569343, 0.656934306569343, 0.6617647058823529, 0.6666666666666666, 0.6666666666666666, 0.6617647058823529, 0.656934306569343, 0.6617647058823529, 0.656934306569343, 0.6617647058823529, 0.656934306569343, 0.6617647058823529, 0.6666666666666666, 0.6617647058823529, 0.6666666666666666, 0.6716417910447762, 0.6716417910447762, 0.6766917293233082, 0.6766917293233082, 0.6766917293233082, 0.6716417910447762, 0.6716417910447762, 0.6716417910447762, 0.6766917293233082, 0.6818181818181818, 0.6766917293233082, 0.6766917293233082, 0.6766917293233082, 0.6666666666666666, 0.6617647058823529, 0.6617647058823529, 0.6617647058823529, 0.6617647058823529, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6617647058823529, 0.6766917293233082, 0.6766917293233082, 0.6818181818181818, 0.6766917293233082, 0.6716417910447762, 0.6766917293233082, 0.6766917293233082, 0.6666666666666666, 0.6716417910447762, 0.6666666666666666, 0.6617647058823529, 0.6617647058823529, 0.6617647058823529, 0.6617647058823529, 0.656934306569343, 0.656934306569343, 0.6617647058823529, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6716417910447762, 0.6716417910447762, 0.6666666666666666, 0.6766917293233082, 0.6716417910447762, 0.6716417910447762, 0.6870229007633588, 0.6818181818181818, 0.6766917293233082, 0.6870229007633588, 0.6766917293233082, 0.6716417910447762, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6976744186046512, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6818181818181818, 0.6923076923076923, 0.6923076923076923, 0.6818181818181818, 0.6766917293233082, 0.6766917293233082, 0.6766917293233082, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6617647058823529, 0.6617647058823529, 0.6666666666666666, 0.6617647058823529, 0.656934306569343, 0.6521739130434783, 0.6521739130434783, 0.656934306569343, 0.6617647058823529, 0.6617647058823529, 0.6617647058823529, 0.6617647058823529, 0.656934306569343, 0.656934306569343, 0.656934306569343, 0.656934306569343, 0.6617647058823529, 0.6666666666666666, 0.6666666666666666, 0.6617647058823529, 0.6666666666666666, 0.6666666666666666, 0.6716417910447762, 0.6716417910447762, 0.6617647058823529, 0.656934306569343, 0.6617647058823529, 0.6617647058823529, 0.6617647058823529, 0.6617647058823529, 0.6617647058823529, 0.6617647058823529, 0.656934306569343, 0.6666666666666666, 0.6666666666666666, 0.6617647058823529, 0.6666666666666666, 0.6716417910447762, 0.6716417910447762, 0.6716417910447762, 0.6666666666666666, 0.6617647058823529, 0.6617647058823529, 0.6617647058823529, 0.6617647058823529, 0.6521739130434783, 0.6521739130434783, 0.6521739130434783, 0.6474820143884892, 0.6428571428571429, 0.6382978723404256, 0.6382978723404256, 0.6382978723404256, 0.6382978723404256, 0.6382978723404256, 0.6293706293706294, 0.6293706293706294, 0.6293706293706294, 0.625, 0.6206896551724138, 0.6164383561643836, 0.6122448979591837, 0.6122448979591837, 0.6122448979591837, 0.6081081081081081, 0.6081081081081081, 0.6081081081081081, 0.6040268456375839, 0.6040268456375839, 0.6040268456375839, 0.6, 0.6040268456375839, 0.6081081081081081, 0.6164383561643836, 0.6122448979591837, 0.6122448979591837, 0.6122448979591837, 0.6122448979591837, 0.6206896551724138, 0.6206896551724138, 0.6206896551724138, 0.6206896551724138, 0.625, 0.625, 0.6338028169014085, 0.6382978723404256, 0.6382978723404256, 0.6428571428571429, 0.6428571428571429, 0.6428571428571429, 0.6338028169014085, 0.6338028169014085, 0.6338028169014085, 0.6338028169014085, 0.6338028169014085, 0.6338028169014085, 0.6338028169014085, 0.6338028169014085, 0.6382978723404256, 0.6382978723404256, 0.6338028169014085, 0.6338028169014085, 0.6474820143884892, 0.6474820143884892, 0.6521739130434783, 0.656934306569343, 0.6428571428571429, 0.6382978723404256, 0.6428571428571429, 0.6428571428571429, 0.6428571428571429, 0.6428571428571429, 0.6382978723404256, 0.6338028169014085, 0.6382978723404256, 0.6428571428571429, 0.6382978723404256, 0.6293706293706294, 0.625, 0.6338028169014085, 0.6338028169014085, 0.6338028169014085, 0.6338028169014085, 0.6428571428571429, 0.6428571428571429, 0.6382978723404256, 0.6428571428571429, 0.6382978723404256, 0.6428571428571429, 0.6428571428571429, 0.6428571428571429, 0.6428571428571429, 0.6382978723404256, 0.6338028169014085, 0.6293706293706294, 0.6382978723404256, 0.6338028169014085, 0.6338028169014085, 0.6293706293706294, 0.6338028169014085, 0.6293706293706294, 0.6293706293706294, 0.6293706293706294, 0.6428571428571429, 0.6382978723404256, 0.6338028169014085, 0.6293706293706294, 0.6293706293706294, 0.6293706293706294, 0.6293706293706294, 0.625, 0.6338028169014085, 0.6338028169014085, 0.6338028169014085, 0.6428571428571429, 0.6474820143884892, 0.6382978723404256, 0.6382978723404256, 0.6474820143884892, 0.6521739130434783, 0.6617647058823529, 0.6521739130434783, 0.656934306569343, 0.6474820143884892, 0.6474820143884892, 0.6521739130434783, 0.6521739130434783, 0.6521739130434783, 0.6666666666666666, 0.6716417910447762, 0.6766917293233082, 0.6818181818181818, 0.6818181818181818, 0.6716417910447762, 0.6617647058823529, 0.6617647058823529, 0.656934306569343, 0.656934306569343, 0.6521739130434783, 0.6474820143884892, 0.6474820143884892, 0.6428571428571429, 0.6428571428571429, 0.6428571428571429, 0.6428571428571429, 0.6428571428571429, 0.6382978723404256, 0.6428571428571429, 0.6474820143884892, 0.6428571428571429, 0.6382978723404256, 0.6382978723404256, 0.6382978723404256, 0.6382978723404256, 0.6338028169014085, 0.6338028169014085, 0.625, 0.625, 0.6338028169014085, 0.6293706293706294, 0.6338028169014085, 0.6293706293706294, 0.6338028169014085, 0.6382978723404256, 0.6382978723404256, 0.6338028169014085, 0.6293706293706294, 0.6293706293706294, 0.6293706293706294, 0.6293706293706294, 0.625, 0.6206896551724138, 0.625, 0.6206896551724138, 0.6206896551724138, 0.6338028169014085, 0.6382978723404256, 0.6428571428571429, 0.6474820143884892, 0.6521739130434783, 0.6521739130434783, 0.6521739130434783, 0.656934306569343, 0.6474820143884892, 0.6521739130434783, 0.6474820143884892, 0.6521739130434783, 0.6521739130434783, 0.6428571428571429, 0.6474820143884892, 0.6474820143884892, 0.6474820143884892, 0.6428571428571429, 0.6474820143884892, 0.6428571428571429, 0.6474820143884892, 0.6521739130434783, 0.6474820143884892, 0.6474820143884892, 0.6521739130434783, 0.6474820143884892, 0.6521739130434783, 0.6521739130434783, 0.6474820143884892, 0.6474820143884892, 0.6428571428571429, 0.6428571428571429, 0.6382978723404256, 0.6382978723404256, 0.6474820143884892, 0.6428571428571429, 0.6338028169014085, 0.6382978723404256, 0.6382978723404256, 0.6382978723404256, 0.6382978723404256, 0.6382978723404256, 0.6428571428571429, 0.6474820143884892, 0.6474820143884892, 0.656934306569343, 0.656934306569343, 0.656934306569343, 0.656934306569343, 0.6521739130434783, 0.6474820143884892, 0.6474820143884892, 0.6474820143884892, 0.6521739130434783] # normal case 2 (100000 iterations and 500 measurements)

# lst_y_4 = [0.9, 0.9, 0.89, 0.8712871287128713, 0.87, 0.86, 0.85, 0.85, 0.84, 0.84, 0.81, 0.81, 0.81, 0.81, 0.8181818181818182, 0.8181818181818182, 0.8181818181818182, 0.81, 0.81, 0.8, 0.79, 0.7821782178217822, 0.797979797979798, 0.78, 0.78, 0.7878787878787878, 0.78, 0.78, 0.78, 0.78, 0.7722772277227723, 0.78, 0.78, 0.78, 0.78, 0.76, 0.76, 0.76, 0.76, 0.75, 0.74, 0.74, 0.74, 0.74, 0.74, 0.7474747474747475, 0.7474747474747475, 0.7474747474747475, 0.73, 0.73, 0.72, 0.7272727272727273, 0.7272727272727273, 0.72, 0.7128712871287128, 0.71, 0.71, 0.7, 0.68, 0.68, 0.68, 0.68, 0.6868686868686869, 0.6868686868686869, 0.6868686868686869, 0.6868686868686869, 0.68, 0.68, 0.68, 0.68, 0.68, 0.6938775510204082, 0.6938775510204082, 0.7010309278350515, 0.6938775510204082, 0.6938775510204082, 0.6868686868686869, 0.7010309278350515, 0.7010309278350515, 0.7010309278350515, 0.7010309278350515, 0.7083333333333334, 0.7010309278350515, 0.7010309278350515, 0.7010309278350515, 0.6938775510204082, 0.6868686868686869, 0.6868686868686869, 0.6938775510204082, 0.6938775510204082, 0.6938775510204082, 0.6868686868686869, 0.68, 0.6601941747572816, 0.66, 0.6534653465346535, 0.65, 0.65, 0.65, 0.65, 0.65, 0.6464646464646465, 0.6666666666666666, 0.6736842105263158, 0.6666666666666666, 0.6597938144329897, 0.6736842105263158, 0.6666666666666666, 0.6597938144329897, 0.6666666666666666, 0.6666666666666666, 0.6530612244897959, 0.6464646464646465, 0.6530612244897959, 0.6464646464646465, 0.64, 0.63, 0.63, 0.63, 0.61, 0.6161616161616161, 0.6161616161616161, 0.6224489795918368, 0.6224489795918368, 0.6224489795918368, 0.6288659793814433, 0.6224489795918368, 0.6161616161616161, 0.61, 0.61, 0.61, 0.61, 0.61, 0.6161616161616161, 0.6161616161616161, 0.61, 0.6224489795918368, 0.6224489795918368, 0.6288659793814433, 0.6288659793814433, 0.6421052631578947, 0.6354166666666666, 0.6354166666666666, 0.6354166666666666, 0.6224489795918368, 0.61, 0.59, 0.5959595959595959, 0.59, 0.59, 0.5959595959595959, 0.6020408163265306, 0.5959595959595959, 0.5959595959595959, 0.5959595959595959, 0.6020408163265306, 0.6020408163265306, 0.6020408163265306, 0.6082474226804123, 0.5959595959595959, 0.6020408163265306, 0.6082474226804123, 0.6082474226804123, 0.5959595959595959, 0.59, 0.59, 0.59, 0.6020408163265306, 0.5959595959595959, 0.6020408163265306, 0.6020408163265306, 0.6020408163265306, 0.6082474226804123, 0.6020408163265306, 0.6020408163265306, 0.6020408163265306, 0.5959595959595959, 0.5959595959595959, 0.6020408163265306, 0.5959595959595959, 0.59, 0.5959595959595959, 0.5858585858585859, 0.5858585858585859, 0.5858585858585859, 0.5858585858585859, 0.58, 0.5918367346938775, 0.58, 0.5918367346938775, 0.5858585858585859, 0.5858585858585859, 0.58, 0.57, 0.57, 0.57, 0.56, 0.5490196078431373, 0.5612244897959183, 0.5555555555555556, 0.5555555555555556, 0.5555555555555556, 0.5555555555555556, 0.5612244897959183, 0.5789473684210527, 0.5789473684210527, 0.5729166666666666, 0.5789473684210527, 0.5789473684210527, 0.5729166666666666, 0.5789473684210527, 0.5729166666666666, 0.5729166666666666, 0.5670103092783505, 0.5670103092783505, 0.5729166666666666, 0.5612244897959183, 0.5670103092783505, 0.5670103092783505, 0.5729166666666666, 0.5612244897959183, 0.5612244897959183, 0.5729166666666666, 0.5729166666666666, 0.5729166666666666, 0.5789473684210527, 0.5789473684210527, 0.5913978494623656, 0.5913978494623656, 0.5851063829787234, 0.5789473684210527, 0.5851063829787234, 0.5851063829787234, 0.5729166666666666, 0.5670103092783505, 0.5670103092783505, 0.5612244897959183, 0.5729166666666666, 0.5729166666666666, 0.5729166666666666, 0.5612244897959183, 0.5670103092783505, 0.5670103092783505, 0.5612244897959183, 0.5670103092783505, 0.5612244897959183, 0.5612244897959183, 0.55, 0.55, 0.5555555555555556, 0.55, 0.5555555555555556, 0.5454545454545454, 0.5510204081632653, 0.5510204081632653, 0.5510204081632653, 0.5510204081632653, 0.5567010309278351, 0.5567010309278351, 0.5684210526315789, 0.5567010309278351, 0.5454545454545454, 0.5510204081632653, 0.5510204081632653, 0.5454545454545454, 0.5454545454545454, 0.5454545454545454, 0.5454545454545454, 0.5454545454545454, 0.5510204081632653, 0.5510204081632653, 0.5567010309278351, 0.5567010309278351, 0.5625, 0.5567010309278351, 0.5567010309278351, 0.5567010309278351, 0.5454545454545454, 0.5454545454545454, 0.5346534653465347, 0.53, 0.53, 0.53, 0.53, 0.53, 0.5353535353535354, 0.5408163265306123, 0.5353535353535354, 0.5353535353535354, 0.53, 0.53, 0.52, 0.5252525252525253, 0.52, 0.5151515151515151, 0.5151515151515151, 0.51, 0.5151515151515151, 0.5204081632653061, 0.5257731958762887, 0.5257731958762887, 0.53125, 0.5257731958762887, 0.5257731958762887, 0.53125, 0.5425531914893617, 0.5368421052631579, 0.5368421052631579, 0.5368421052631579, 0.5368421052631579, 0.5368421052631579, 0.5425531914893617, 0.5483870967741935, 0.5483870967741935, 0.5425531914893617, 0.5425531914893617, 0.53125, 0.5368421052631579, 0.53125, 0.53125, 0.53125, 0.5483870967741935, 0.5483870967741935, 0.5425531914893617, 0.5425531914893617, 0.5368421052631579, 0.53125, 0.5368421052631579, 0.5368421052631579, 0.5425531914893617, 0.5425531914893617, 0.5425531914893617, 0.5425531914893617, 0.5543478260869565, 0.5604395604395604, 0.5543478260869565, 0.5543478260869565, 0.5543478260869565, 0.5543478260869565, 0.5483870967741935, 0.5543478260869565, 0.5543478260869565, 0.5543478260869565, 0.5543478260869565, 0.5604395604395604, 0.5666666666666667, 0.5666666666666667, 0.5730337078651685, 0.5666666666666667, 0.5795454545454546, 0.5862068965517241, 0.5930232558139535, 0.5930232558139535, 0.5930232558139535, 0.5930232558139535, 0.5862068965517241, 0.5862068965517241, 0.5795454545454546, 0.5795454545454546, 0.5930232558139535, 0.6, 0.6, 0.5862068965517241, 0.5862068965517241, 0.5795454545454546, 0.5730337078651685, 0.5604395604395604, 0.5543478260869565, 0.5666666666666667, 0.5483870967741935, 0.5483870967741935, 0.5543478260869565, 0.5483870967741935, 0.5425531914893617, 0.5368421052631579, 0.5368421052631579, 0.5368421052631579, 0.53125, 0.53125, 0.5368421052631579, 0.5368421052631579, 0.5425531914893617, 0.5368421052631579, 0.5368421052631579, 0.5368421052631579, 0.53125, 0.5257731958762887, 0.5204081632653061, 0.5204081632653061, 0.5204081632653061, 0.5204081632653061, 0.5204081632653061, 0.5257731958762887, 0.5257731958762887, 0.5204081632653061, 0.5204081632653061, 0.53125, 0.53125, 0.5257731958762887, 0.5257731958762887, 0.53125, 0.5368421052631579, 0.5368421052631579, 0.5368421052631579, 0.5257731958762887, 0.53125, 0.5368421052631579, 0.53125, 0.5368421052631579, 0.5425531914893617, 0.5425531914893617, 0.5483870967741935, 0.5543478260869565, 0.5543478260869565, 0.5543478260869565, 0.5425531914893617, 0.5425531914893617, 0.5425531914893617, 0.5425531914893617, 0.5425531914893617, 0.53125, 0.53125, 0.5368421052631579, 0.5368421052631579, 0.5204081632653061, 0.5151515151515151, 0.5204081632653061, 0.5204081632653061, 0.5257731958762887, 0.5204081632653061, 0.5204081632653061, 0.5204081632653061, 0.5204081632653061, 0.5204081632653061, 0.51, 0.5151515151515151, 0.51, 0.504950495049505, 0.49504950495049505, 0.5050505050505051, 0.5102040816326531, 0.5102040816326531, 0.5102040816326531, 0.5050505050505051, 0.5, 0.5050505050505051, 0.5050505050505051, 0.5050505050505051, 0.5154639175257731, 0.5319148936170213, 0.5319148936170213, 0.5319148936170213, 0.5208333333333334, 0.5208333333333334, 0.5208333333333334, 0.5154639175257731, 0.5154639175257731, 0.5154639175257731, 0.5208333333333334, 0.5208333333333334, 0.5376344086021505, 0.5319148936170213, 0.5319148936170213, 0.5319148936170213, 0.5376344086021505, 0.5263157894736842, 0.5263157894736842, 0.5208333333333334, 0.5154639175257731, 0.5154639175257731, 0.5154639175257731, 0.5102040816326531, 0.5102040816326531, 0.5102040816326531, 0.5154639175257731, 0.5154639175257731, 0.5208333333333334, 0.5263157894736842, 0.5376344086021505, 0.5555555555555556, 0.5494505494505495, 0.5555555555555556, 0.5555555555555556, 0.5681818181818182, 0.5617977528089888, 0.5617977528089888, 0.5555555555555556, 0.5555555555555556, 0.5494505494505495, 0.5555555555555556, 0.5434782608695652, 0.5434782608695652, 0.5434782608695652, 0.5434782608695652, 0.5376344086021505, 0.5319148936170213, 0.5263157894736842, 0.5208333333333334, 0.5208333333333334, 0.5154639175257731, 0.5208333333333334] # special case 2 (100000 iterations and 500 measurements)

# for i in range(len(lst_y_1)):
#     lst_x_a.append(100 * i)
#     lst_x_b.append(200 * i)

# plt.plot(lst_x_a, lst_y_1, 'g-')
# plt.plot(lst_x_a, lst_y_2, 'y-')
# plt.plot(lst_x_b, lst_y_3, 'b-')
# plt.plot(lst_x_b, lst_y_4, 'r-')
# plt.xlabel("time")
# plt.ylabel("mole fraction of solute")
# plt.legend(["normal (50000 iterations and 500 measurements)", "overflow (50000 iterations and 500 measurements)", "normal (100000 iterations and 500 measurements)", "overflow (100000 iterations and 500 measurements)"])
# plt.legend(["normal", "overflow"])
# plt.show()

# lst_x = []

# lst_y_1a = [0.9, 0.9, 0.9, 0.9, 0.9090909090909091, 0.9, 0.8737864077669902, 0.8571428571428571, 0.8490566037735849, 0.8411214953271028, 0.8411214953271028, 0.8411214953271028, 0.8333333333333334, 0.8256880733944955, 0.8108108108108109, 0.8181818181818182, 0.8181818181818182, 0.8181818181818182, 0.8181818181818182, 0.8181818181818182, 0.8108108108108109, 0.8035714285714286, 0.8108108108108109, 0.8108108108108109, 0.8108108108108109, 0.8108108108108109, 0.8181818181818182, 0.8035714285714286, 0.8035714285714286, 0.7964601769911505, 0.7964601769911505, 0.7894736842105263, 0.7894736842105263, 0.782608695652174, 0.782608695652174, 0.7627118644067796, 0.7627118644067796, 0.7627118644067796, 0.75, 0.743801652892562, 0.743801652892562, 0.7377049180327869, 0.7317073170731707, 0.7317073170731707, 0.7258064516129032, 0.7142857142857143, 0.72, 0.7258064516129032, 0.7258064516129032, 0.72, 0.7142857142857143, 0.7142857142857143, 0.7258064516129032, 0.7317073170731707, 0.7317073170731707, 0.7317073170731707, 0.7377049180327869, 0.7377049180327869, 0.7377049180327869, 0.7317073170731707, 0.7258064516129032, 0.7317073170731707, 0.7377049180327869, 0.743801652892562, 0.75, 0.743801652892562, 0.743801652892562, 0.743801652892562, 0.7377049180327869, 0.7377049180327869, 0.7258064516129032, 0.7317073170731707, 0.7317073170731707, 0.7142857142857143, 0.72, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.703125, 0.703125, 0.703125, 0.703125, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.703125, 0.703125, 0.6976744186046512, 0.703125, 0.703125, 0.6923076923076923, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.7086614173228346, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.7142857142857143, 0.7142857142857143, 0.7258064516129032, 0.7317073170731707, 0.7258064516129032, 0.7258064516129032, 0.7258064516129032, 0.7258064516129032, 0.72, 0.7317073170731707, 0.7317073170731707, 0.7317073170731707, 0.7377049180327869, 0.7377049180327869, 0.743801652892562, 0.743801652892562, 0.743801652892562, 0.743801652892562, 0.743801652892562, 0.743801652892562, 0.7377049180327869, 0.7317073170731707, 0.7317073170731707, 0.7258064516129032, 0.7317073170731707, 0.7317073170731707, 0.7317073170731707, 0.7377049180327869, 0.743801652892562, 0.743801652892562, 0.743801652892562, 0.7317073170731707, 0.7377049180327869, 0.743801652892562, 0.743801652892562, 0.75, 0.743801652892562, 0.743801652892562, 0.7627118644067796, 0.75, 0.75, 0.75, 0.743801652892562, 0.743801652892562, 0.743801652892562, 0.743801652892562, 0.743801652892562, 0.7377049180327869, 0.7317073170731707, 0.7317073170731707, 0.7258064516129032, 0.7258064516129032, 0.7258064516129032, 0.7258064516129032, 0.7258064516129032, 0.72, 0.72, 0.72, 0.72, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.72, 0.72, 0.7142857142857143, 0.7142857142857143, 0.72, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.72, 0.72, 0.7258064516129032, 0.72, 0.7142857142857143, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.703125, 0.703125, 0.703125, 0.7086614173228346, 0.7142857142857143, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.7142857142857143, 0.7142857142857143, 0.72, 0.72, 0.72, 0.7142857142857143, 0.7142857142857143, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.703125, 0.7142857142857143, 0.72, 0.72, 0.72, 0.7317073170731707, 0.7317073170731707, 0.7258064516129032, 0.7317073170731707, 0.7258064516129032, 0.7258064516129032, 0.72, 0.7142857142857143, 0.7142857142857143, 0.7086614173228346, 0.72, 0.7142857142857143, 0.7142857142857143, 0.7317073170731707, 0.7317073170731707, 0.7317073170731707, 0.7377049180327869, 0.7377049180327869, 0.743801652892562, 0.743801652892562, 0.743801652892562, 0.743801652892562, 0.7563025210084033, 0.7627118644067796, 0.7692307692307693, 0.7758620689655172, 0.7692307692307693, 0.7692307692307693, 0.7627118644067796, 0.7692307692307693, 0.782608695652174, 0.782608695652174, 0.7692307692307693, 0.7692307692307693, 0.7692307692307693, 0.7627118644067796, 0.7627118644067796, 0.7627118644067796, 0.7627118644067796, 0.7563025210084033, 0.7563025210084033, 0.7563025210084033, 0.743801652892562, 0.75, 0.75, 0.75, 0.7563025210084033, 0.75, 0.75, 0.75, 0.7563025210084033, 0.7627118644067796, 0.7627118644067796, 0.7627118644067796, 0.7627118644067796, 0.7627118644067796, 0.7627118644067796, 0.7627118644067796, 0.7563025210084033, 0.7627118644067796, 0.7563025210084033, 0.7563025210084033, 0.7563025210084033, 0.7563025210084033, 0.75, 0.7377049180327869, 0.72, 0.72, 0.72, 0.72, 0.7258064516129032, 0.7258064516129032, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.703125, 0.703125, 0.703125, 0.703125, 0.6976744186046512, 0.703125, 0.7086614173228346, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6818181818181818, 0.6766917293233082, 0.6716417910447762, 0.6716417910447762, 0.6716417910447762, 0.6716417910447762, 0.6716417910447762, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6870229007633588, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6870229007633588, 0.6923076923076923, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.7086614173228346, 0.703125, 0.703125, 0.703125, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.6870229007633588, 0.6923076923076923, 0.6923076923076923, 0.6976744186046512, 0.6976744186046512, 0.7086614173228346, 0.7086614173228346, 0.703125, 0.6976744186046512, 0.703125, 0.6976744186046512, 0.6923076923076923, 0.703125, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6976744186046512, 0.6976744186046512, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.6923076923076923, 0.6870229007633588, 0.6818181818181818, 0.6818181818181818, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6818181818181818, 0.6818181818181818, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6766917293233082, 0.6818181818181818, 0.6818181818181818, 0.6818181818181818, 0.6818181818181818, 0.6766917293233082, 0.6716417910447762, 0.6818181818181818, 0.6818181818181818, 0.6870229007633588, 0.6870229007633588, 0.6923076923076923, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6923076923076923, 0.6976744186046512, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.703125, 0.7086614173228346, 0.7142857142857143, 0.7142857142857143, 0.72, 0.7142857142857143, 0.7142857142857143, 0.7086614173228346, 0.7086614173228346, 0.7142857142857143, 0.7086614173228346, 0.703125, 0.703125, 0.7086614173228346, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.703125, 0.703125, 0.6923076923076923, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6923076923076923, 0.6976744186046512, 0.703125, 0.6870229007633588, 0.6923076923076923, 0.6870229007633588, 0.6818181818181818, 0.6766917293233082, 0.6818181818181818, 0.6870229007633588, 0.6870229007633588, 0.6923076923076923, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6976744186046512, 0.6923076923076923, 0.6870229007633588, 0.6923076923076923, 0.6976744186046512, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.6976744186046512, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6818181818181818, 0.6818181818181818, 0.6870229007633588, 0.6923076923076923, 0.703125, 0.703125, 0.7086614173228346, 0.7086614173228346, 0.7142857142857143, 0.7258064516129032, 0.7317073170731707, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.72, 0.72, 0.72, 0.72, 0.7258064516129032, 0.7258064516129032, 0.7258064516129032, 0.72, 0.7142857142857143] # true normal 1

# lst_y_1b = [0.9, 0.9, 0.8910891089108911, 0.8623449379751901, 0.84, 0.82, 0.811081108110811, 0.7910791079107911, 0.7310731073107312, 0.7200000000000001, 0.7290729072907292, 0.7382953181272509, 0.7382953181272509, 0.7382953181272509, 0.7476729056150536, 0.7572115384615384, 0.7572115384615384, 0.7476729056150536, 0.7382953181272509, 0.7000000000000001, 0.6910691069106911, 0.66, 0.64, 0.62, 0.62, 0.629062906290629, 0.6382553021208484, 0.6382553021208484, 0.62, 0.629062906290629, 0.629062906290629, 0.58, 0.5890589058905891, 0.5599999999999999, 0.54, 0.54, 0.52, 0.52, 0.52, 0.509050905090509, 0.509050905090509, 0.49999999999999994, 0.5182072829131653, 0.509050905090509, 0.48, 0.46904690469046906, 0.44000000000000006, 0.46742067861074965, 0.4767628205128205, 0.46742067861074965, 0.46742067861074965, 0.45818327330932374, 0.44000000000000006, 0.4, 0.4, 0.4, 0.4, 0.4, 0.41816726690676265, 0.41816726690676265, 0.42738464618156335, 0.41816726690676265, 0.42738464618156335, 0.42738464618156335, 0.41816726690676265, 0.42738464618156335, 0.40904090409040905, 0.40904090409040905, 0.41816726690676265, 0.41816726690676265, 0.41816726690676265, 0.40904090409040905, 0.40904090409040905, 0.40904090409040905, 0.41816726690676265, 0.41816726690676265, 0.41816726690676265, 0.4, 0.40904090409040905, 0.4, 0.41816726690676265, 0.41816726690676265, 0.4, 0.40904090409040905, 0.40904090409040905, 0.40904090409040905, 0.4, 0.40904090409040905, 0.4, 0.40904090409040905, 0.42738464618156335, 0.42738464618156335, 0.43669871794871795, 0.4461152882205514, 0.4461152882205514, 0.4461152882205514, 0.4461152882205514, 0.42738464618156335, 0.42738464618156335, 0.42738464618156335, 0.41816726690676265, 0.41816726690676265, 0.42738464618156335, 0.41816726690676265, 0.40904090409040905, 0.4, 0.3890389038903891, 0.3890389038903891, 0.36214485794317725, 0.369036903690369, 0.3781512605042017, 0.3781512605042017, 0.369036903690369, 0.369036903690369, 0.36, 0.36, 0.35103510351035105, 0.3781512605042017, 0.3781512605042017, 0.3781512605042017, 0.369036903690369, 0.369036903690369, 0.38734861375237717, 0.39663461538461536, 0.39663461538461536, 0.39663461538461536, 0.39663461538461536, 0.38734861375237717, 0.38734861375237717, 0.3781512605042017, 0.3781512605042017, 0.3781512605042017, 0.39663461538461536, 0.40601503759398494, 0.39663461538461536, 0.38734861375237717, 0.39663461538461536, 0.39663461538461536, 0.40601503759398494, 0.40601503759398494, 0.40601503759398494, 0.40601503759398494, 0.38734861375237717, 0.38734861375237717, 0.38734861375237717, 0.3781512605042017, 0.369036903690369, 0.369036903690369, 0.369036903690369, 0.35103510351035105, 0.33999999999999997, 0.33999999999999997, 0.33999999999999997, 0.33999999999999997, 0.3581432573029212, 0.3581432573029212, 0.34903490349034905, 0.34903490349034905, 0.34903490349034905, 0.32, 0.3381352541016407, 0.3381352541016407, 0.3381352541016407, 0.3381352541016407, 0.3381352541016407, 0.34731258132319087, 0.34731258132319087, 0.34731258132319087, 0.3381352541016407, 0.3381352541016407, 0.3565705128205128, 0.3659147869674185, 0.3659147869674185, 0.3753512645523886, 0.3753512645523886, 0.3753512645523886, 0.3659147869674185, 0.3848859411114461, 0.3753512645523886, 0.3753512645523886, 0.3753512645523886, 0.3565705128205128, 0.3565705128205128, 0.3565705128205128, 0.34731258132319087, 0.3565705128205128, 0.3565705128205128, 0.3565705128205128, 0.3565705128205128, 0.3565705128205128, 0.3381352541016407, 0.3381352541016407, 0.3381352541016407, 0.329032903290329, 0.329032903290329, 0.329032903290329, 0.3, 0.30903090309030906, 0.30903090309030906, 0.31812725090036015, 0.31812725090036015, 0.3272945651085978, 0.3272945651085978, 0.3272945651085978, 0.3272945651085978, 0.3272945651085978, 0.3272945651085978, 0.3272945651085978, 0.3272945651085978, 0.31812725090036015, 0.30903090309030906, 0.30903090309030906, 0.27999999999999997, 0.289028902890289, 0.25999999999999995, 0.269026902690269, 0.2781112444977991, 0.269026902690269, 0.2872585326794115, 0.2964743589743589, 0.2964743589743589, 0.2872585326794115, 0.2872585326794115, 0.3057644110275689, 0.2781112444977991, 0.269026902690269, 0.269026902690269, 0.25999999999999995, 0.23999999999999994, 0.23999999999999994, 0.23999999999999994, 0.23999999999999994, 0.23999999999999994, 0.24902490249024906, 0.23999999999999994, 0.23999999999999994, 0.23999999999999994, 0.22000000000000003, 0.22902290229022898, 0.22000000000000003, 0.22000000000000003, 0.20000000000000007, 0.20000000000000007, 0.20000000000000007, 0.20000000000000007, 0.20902090209020907, 0.20902090209020907, 0.20902090209020907, 0.20902090209020907, 0.22720448403563204, 0.22720448403563204, 0.22720448403563204, 0.23637820512820507, 0.21808723489395754, 0.23637820512820507, 0.23637820512820507, 0.22720448403563204, 0.20902090209020907, 0.20000000000000007, 0.20000000000000007, 0.20902090209020907, 0.20902090209020907, 0.20902090209020907, 0.20902090209020907, 0.20902090209020907, 0.21808723489395754, 0.21808723489395754, 0.20000000000000007, 0.21808723489395754, 0.21808723489395754, 0.21808723489395754, 0.21808723489395754, 0.21808723489395754, 0.20902090209020907, 0.20902090209020907, 0.20902090209020907, 0.20000000000000007, 0.21808723489395754, 0.21808723489395754, 0.189018901890189, 0.17101710171017104, 0.16901690169016903, 0.17807122849139662, 0.16000000000000003, 0.15806322529011607, 0.14, 0.14, 0.14, 0.15806322529011607, 0.14, 0.14901490149014907, 0.15806322529011607, 0.15806322529011607, 0.15806322529011607, 0.14901490149014907, 0.14901490149014907, 0.14, 0.14901490149014907, 0.16715043539185265, 0.16715043539185265, 0.16715043539185265, 0.15806322529011607, 0.16715043539185265, 0.16715043539185265, 0.18546365914786972, 0.18546365914786972, 0.18546365914786972, 0.18546365914786972, 0.18546365914786972, 0.19470092332396632, 0.19470092332396632, 0.15806322529011607, 0.15806322529011607, 0.17628205128205127, 0.18546365914786972, 0.17628205128205127, 0.17628205128205127, 0.17628205128205127, 0.18546365914786972, 0.18546365914786972, 0.18546365914786972, 0.18546365914786972, 0.17628205128205127, 0.17628205128205127, 0.17628205128205127, 0.17628205128205127, 0.16715043539185265, 0.16715043539185265, 0.16715043539185265, 0.17628205128205127, 0.17628205128205127, 0.17628205128205127, 0.17628205128205127, 0.18546365914786972, 0.19470092332396632, 0.20399959803034867, 0.21336553945249592, 0.19470092332396632, 0.20399959803034867, 0.17628205128205127, 0.17628205128205127, 0.17628205128205127, 0.16715043539185265, 0.14901490149014907, 0.14901490149014907, 0.15806322529011607, 0.15806322529011607, 0.16715043539185265, 0.15806322529011607, 0.16715043539185265, 0.16715043539185265, 0.16715043539185265, 0.16715043539185265, 0.14901490149014907, 0.14901490149014907, 0.14901490149014907, 0.15806322529011607, 0.15806322529011607, 0.14901490149014907, 0.14901490149014907, 0.13101310131013105, 0.14901490149014907, 0.15806322529011607, 0.16715043539185265, 0.16715043539185265, 0.16715043539185265, 0.16715043539185265, 0.17628205128205127, 0.20399959803034867, 0.19470092332396632, 0.19470092332396632, 0.20399959803034867, 0.20399959803034867, 0.19470092332396632, 0.18546365914786972, 0.19470092332396632, 0.18546365914786972, 0.19470092332396632, 0.19470092332396632, 0.19470092332396632, 0.19470092332396632, 0.18546365914786972, 0.19470092332396632, 0.20399959803034867, 0.20399959803034867, 0.20399959803034867, 0.20399959803034867, 0.18546365914786972, 0.19470092332396632, 0.19470092332396632, 0.20399959803034867, 0.19470092332396632, 0.21336553945249592, 0.2228047182175622, 0.24192732057900596, 0.23232323232323226, 0.24192732057900596, 0.23232323232323226, 0.21336553945249592, 0.23232323232323226, 0.2228047182175622, 0.23232323232323226, 0.2228047182175622, 0.2228047182175622, 0.25162337662337664, 0.25162337662337664, 0.2614179635845794, 0.2614179635845794, 0.28132992327365736, 0.28132992327365736, 0.28132992327365736, 0.28132992327365736, 0.30171969931006076, 0.30171969931006076, 0.30171969931006076, 0.29146141215106736, 0.2713178294573643, 0.2713178294573643, 0.2614179635845794, 0.2614179635845794, 0.2713178294573643, 0.28132992327365736, 0.29146141215106736, 0.29146141215106736, 0.29146141215106736, 0.29146141215106736, 0.29146141215106736, 0.29146141215106736, 0.28132992327365736, 0.2713178294573643, 0.29146141215106736, 0.29146141215106736, 0.28132992327365736, 0.2713178294573643, 0.28132992327365736, 0.29146141215106736, 0.29146141215106736, 0.29146141215106736, 0.28132992327365736, 0.28132992327365736, 0.29146141215106736, 0.29146141215106736, 0.29146141215106736, 0.28132992327365736, 0.24192732057900596, 0.24192732057900596, 0.24192732057900596, 0.23232323232323226, 0.2228047182175622, 0.24192732057900596, 0.23232323232323226, 0.23232323232323226, 0.23232323232323226, 0.23232323232323226, 0.2228047182175622, 0.21336553945249592, 0.19470092332396632, 0.20399959803034867, 0.19470092332396632, 0.18546365914786972, 0.20399959803034867, 0.18546365914786972, 0.17628205128205127, 0.17628205128205127, 0.16715043539185265, 0.16715043539185265, 0.16715043539185265, 0.17628205128205127, 0.16715043539185265, 0.16715043539185265, 0.16715043539185265, 0.16715043539185265, 0.15806322529011607, 0.15806322529011607, 0.14901490149014907, 0.14901490149014907, 0.15806322529011607, 0.15806322529011607, 0.15806322529011607, 0.14, 0.13101310131013105, 0.14, 0.14, 0.14, 0.15806322529011607, 0.15806322529011607, 0.15806322529011607, 0.15806322529011607, 0.16715043539185265, 0.17628205128205127, 0.18546365914786972, 0.18546365914786972, 0.18546365914786972, 0.17628205128205127, 0.17628205128205127, 0.17628205128205127, 0.16715043539185265, 0.16715043539185265, 0.18546365914786972, 0.17628205128205127, 0.18546365914786972] # true special 1

# lst_y_2a = [0.9, 0.9, 0.8910891089108911, 0.8823529411764706, 0.8910891089108911, 0.8910891089108911, 0.8823529411764706, 0.8823529411764706, 0.8823529411764706, 0.8737864077669902, 0.8653846153846154, 0.8411214953271028, 0.8411214953271028, 0.8256880733944955, 0.8256880733944955, 0.8256880733944955, 0.8333333333333334, 0.8411214953271028, 0.8181818181818182, 0.8035714285714286, 0.8035714285714286, 0.8035714285714286, 0.7964601769911505, 0.782608695652174, 0.7758620689655172, 0.7964601769911505, 0.7964601769911505, 0.7964601769911505, 0.782608695652174, 0.7894736842105263, 0.782608695652174, 0.7894736842105263, 0.7964601769911505, 0.782608695652174, 0.7758620689655172, 0.782608695652174, 0.7758620689655172, 0.7758620689655172, 0.782608695652174, 0.782608695652174, 0.7758620689655172, 0.7758620689655172, 0.7627118644067796, 0.7627118644067796, 0.7563025210084033, 0.7627118644067796, 0.7692307692307693, 0.7758620689655172, 0.782608695652174, 0.782608695652174, 0.782608695652174, 0.7894736842105263, 0.782608695652174, 0.7692307692307693, 0.7758620689655172, 0.7758620689655172, 0.7758620689655172, 0.782608695652174, 0.7692307692307693, 0.7692307692307693, 0.7758620689655172, 0.782608695652174, 0.7758620689655172, 0.7758620689655172, 0.7692307692307693, 0.7627118644067796, 0.75, 0.75, 0.75, 0.743801652892562, 0.743801652892562, 0.7563025210084033, 0.7563025210084033, 0.75, 0.743801652892562, 0.7377049180327869, 0.7377049180327869, 0.743801652892562, 0.7377049180327869, 0.7377049180327869, 0.743801652892562, 0.7377049180327869, 0.7317073170731707, 0.7317073170731707, 0.7317073170731707, 0.7317073170731707, 0.7258064516129032, 0.7142857142857143, 0.7258064516129032, 0.7258064516129032, 0.7258064516129032, 0.7317073170731707, 0.7317073170731707, 0.7317073170731707, 0.72, 0.7142857142857143, 0.72, 0.72, 0.7142857142857143, 0.7086614173228346, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6923076923076923, 0.6976744186046512, 0.6923076923076923, 0.6870229007633588, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6923076923076923, 0.6870229007633588, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6976744186046512, 0.7086614173228346, 0.703125, 0.703125, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.6818181818181818, 0.6818181818181818, 0.6766917293233082, 0.6818181818181818, 0.6870229007633588, 0.6923076923076923, 0.703125, 0.6976744186046512, 0.703125, 0.703125, 0.703125, 0.6923076923076923, 0.6923076923076923, 0.6976744186046512, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6870229007633588, 0.6818181818181818, 0.6870229007633588, 0.6818181818181818, 0.6818181818181818, 0.6766917293233082, 0.6766917293233082, 0.6766917293233082, 0.6766917293233082, 0.6766917293233082, 0.6766917293233082, 0.6766917293233082, 0.6716417910447762, 0.6666666666666666, 0.6716417910447762, 0.6716417910447762, 0.6716417910447762, 0.6766917293233082, 0.6716417910447762, 0.6716417910447762, 0.6716417910447762, 0.6716417910447762, 0.6716417910447762, 0.6716417910447762, 0.6766917293233082, 0.6766917293233082, 0.6716417910447762, 0.6617647058823529, 0.656934306569343, 0.656934306569343, 0.6521739130434783, 0.6521739130434783, 0.656934306569343, 0.6474820143884892, 0.6521739130434783, 0.6617647058823529, 0.656934306569343, 0.656934306569343, 0.656934306569343, 0.6521739130434783, 0.656934306569343, 0.656934306569343, 0.6617647058823529, 0.656934306569343, 0.656934306569343, 0.6617647058823529, 0.6666666666666666, 0.6716417910447762, 0.6716417910447762, 0.6766917293233082, 0.6766917293233082, 0.6716417910447762, 0.6818181818181818, 0.6870229007633588, 0.6818181818181818, 0.6766917293233082, 0.6666666666666666, 0.6617647058823529, 0.6666666666666666, 0.6617647058823529, 0.6617647058823529, 0.6666666666666666, 0.6666666666666666, 0.656934306569343, 0.656934306569343, 0.6521739130434783, 0.6474820143884892, 0.6428571428571429, 0.6474820143884892, 0.6666666666666666, 0.6617647058823529, 0.6617647058823529, 0.6617647058823529, 0.6617647058823529, 0.6617647058823529, 0.6666666666666666, 0.6617647058823529, 0.6716417910447762, 0.6666666666666666, 0.6716417910447762, 0.6716417910447762, 0.6716417910447762, 0.6716417910447762, 0.6716417910447762, 0.6766917293233082, 0.6766917293233082, 0.6818181818181818, 0.6818181818181818, 0.6870229007633588, 0.6818181818181818, 0.6870229007633588, 0.6870229007633588, 0.6923076923076923, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6818181818181818, 0.6818181818181818, 0.6716417910447762, 0.6716417910447762, 0.6666666666666666, 0.6617647058823529, 0.6617647058823529, 0.6666666666666666, 0.6666666666666666, 0.6766917293233082, 0.6766917293233082, 0.6766917293233082, 0.6766917293233082, 0.6818181818181818, 0.6766917293233082, 0.6716417910447762, 0.6716417910447762, 0.6666666666666666, 0.6666666666666666, 0.6617647058823529, 0.656934306569343, 0.6521739130434783, 0.6521739130434783, 0.656934306569343, 0.6617647058823529, 0.656934306569343, 0.656934306569343, 0.656934306569343, 0.656934306569343, 0.6521739130434783, 0.6521739130434783, 0.6521739130434783, 0.6474820143884892, 0.6428571428571429, 0.6428571428571429, 0.6382978723404256, 0.6521739130434783, 0.6521739130434783, 0.6521739130434783, 0.6521739130434783, 0.6474820143884892, 0.6521739130434783, 0.6521739130434783, 0.6521739130434783, 0.6474820143884892, 0.6474820143884892, 0.6428571428571429, 0.6474820143884892, 0.6474820143884892, 0.6474820143884892, 0.6474820143884892, 0.6474820143884892, 0.6428571428571429, 0.6428571428571429, 0.6428571428571429, 0.6474820143884892, 0.6474820143884892, 0.6521739130434783, 0.6521739130434783, 0.6474820143884892, 0.656934306569343, 0.6474820143884892, 0.6521739130434783, 0.6521739130434783, 0.656934306569343, 0.6521739130434783, 0.6474820143884892, 0.6428571428571429, 0.6428571428571429, 0.6521739130434783, 0.6474820143884892, 0.6428571428571429, 0.6474820143884892, 0.6521739130434783, 0.6521739130434783, 0.6521739130434783, 0.6474820143884892, 0.6474820143884892, 0.6521739130434783, 0.6521739130434783, 0.6521739130434783, 0.656934306569343, 0.656934306569343, 0.656934306569343, 0.656934306569343, 0.6521739130434783, 0.656934306569343, 0.6521739130434783, 0.656934306569343, 0.6666666666666666, 0.6617647058823529, 0.656934306569343, 0.6617647058823529, 0.6617647058823529, 0.6666666666666666, 0.656934306569343, 0.6617647058823529, 0.6617647058823529, 0.6521739130434783, 0.6521739130434783, 0.6666666666666666, 0.6617647058823529, 0.6521739130434783, 0.6521739130434783, 0.656934306569343, 0.6521739130434783, 0.6521739130434783, 0.6521739130434783, 0.656934306569343, 0.6521739130434783, 0.6521739130434783, 0.6521739130434783, 0.656934306569343, 0.6617647058823529, 0.6617647058823529, 0.6617647058823529, 0.6666666666666666, 0.6716417910447762, 0.656934306569343, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6766917293233082, 0.6716417910447762, 0.6766917293233082, 0.6766917293233082, 0.6818181818181818, 0.6818181818181818, 0.6870229007633588, 0.6766917293233082, 0.6766917293233082, 0.6766917293233082, 0.6716417910447762, 0.6818181818181818, 0.6818181818181818, 0.6818181818181818, 0.6870229007633588, 0.6870229007633588, 0.6923076923076923, 0.6976744186046512, 0.6870229007633588, 0.6923076923076923, 0.6976744186046512, 0.6923076923076923, 0.6818181818181818, 0.6818181818181818, 0.6818181818181818, 0.6766917293233082, 0.6716417910447762, 0.6716417910447762, 0.6666666666666666, 0.6666666666666666, 0.6617647058823529, 0.6617647058823529, 0.6521739130434783, 0.6521739130434783, 0.6521739130434783, 0.656934306569343, 0.656934306569343, 0.656934306569343, 0.656934306569343, 0.656934306569343, 0.656934306569343, 0.6617647058823529, 0.6666666666666666, 0.6666666666666666, 0.656934306569343, 0.6617647058823529, 0.6617647058823529, 0.6617647058823529, 0.656934306569343, 0.656934306569343, 0.656934306569343, 0.6521739130434783, 0.6521739130434783, 0.6617647058823529, 0.6617647058823529, 0.6666666666666666, 0.6666666666666666, 0.6617647058823529, 0.6716417910447762, 0.6666666666666666, 0.6617647058823529, 0.6716417910447762, 0.6716417910447762, 0.6766917293233082, 0.6716417910447762, 0.6716417910447762, 0.6766917293233082, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.6870229007633588, 0.6923076923076923, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.6923076923076923, 0.703125, 0.703125, 0.6976744186046512, 0.6923076923076923, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6923076923076923, 0.6923076923076923, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6870229007633588, 0.6818181818181818, 0.6923076923076923, 0.6976744186046512, 0.6976744186046512, 0.6818181818181818, 0.6818181818181818, 0.6818181818181818, 0.6766917293233082, 0.6766917293233082, 0.6870229007633588, 0.6870229007633588, 0.6766917293233082, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.656934306569343, 0.656934306569343, 0.6521739130434783, 0.6521739130434783, 0.6428571428571429, 0.6382978723404256, 0.6382978723404256, 0.6428571428571429] # true normal 2

# lst_y_2b = [0.9, 0.9, 0.9, 0.8910891089108911, 0.88, 0.84, 0.84, 0.84, 0.7999999999999999, 0.809080908090809, 0.809080908090809, 0.809080908090809, 0.7999999999999999, 0.78, 0.78, 0.76, 0.7690769076907691, 0.76, 0.76, 0.7000000000000001, 0.6890689068906891, 0.6890689068906891, 0.6982793117246899, 0.6982793117246899, 0.6982793117246899, 0.6890689068906891, 0.6890689068906891, 0.6890689068906891, 0.6890689068906891, 0.6890689068906891, 0.669066906690669, 0.669066906690669, 0.669066906690669, 0.64, 0.62, 0.629062906290629, 0.609060906090609, 0.6182472989195678, 0.6, 0.6, 0.5910591059105911, 0.58, 0.571057105710571, 0.569056905690569, 0.5599999999999999, 0.52, 0.511051105110511, 0.5290529052905291, 0.5290529052905291, 0.5290529052905291, 0.5290529052905291, 0.5290529052905291, 0.52, 0.52, 0.52, 0.48, 0.47104710471047107, 0.4600000000000001, 0.44000000000000006, 0.4490449044904491, 0.4490449044904491, 0.44000000000000006, 0.44000000000000006, 0.4490449044904491, 0.44000000000000006, 0.4490449044904491, 0.44000000000000006, 0.45818327330932374, 0.45818327330932374, 0.45818327330932374, 0.45818327330932374, 0.45818327330932374, 0.45818327330932374, 0.45818327330932374, 0.46742067861074965, 0.4490449044904491, 0.44000000000000006, 0.429042904290429, 0.42000000000000004, 0.42000000000000004, 0.42000000000000004, 0.4, 0.4, 0.39103910391039104, 0.3890389038903891, 0.38, 0.38, 0.38, 0.36, 0.33103310331033103, 0.34903490349034905, 0.34903490349034905, 0.33999999999999997, 0.33999999999999997, 0.34903490349034905, 0.34903490349034905, 0.34903490349034905, 0.34903490349034905, 0.34903490349034905, 0.34903490349034905, 0.34903490349034905, 0.33999999999999997, 0.33999999999999997, 0.3, 0.28211284513805523, 0.269026902690269, 0.23999999999999994, 0.23999999999999994, 0.24902490249024906, 0.24902490249024906, 0.24902490249024906, 0.25810324129651857, 0.23999999999999994, 0.25810324129651857, 0.24902490249024906, 0.24902490249024906, 0.25810324129651857, 0.25810324129651857, 0.25810324129651857, 0.26724051646481833, 0.26724051646481833, 0.2764423076923077, 0.25810324129651857, 0.23999999999999994, 0.23999999999999994, 0.23999999999999994, 0.24902490249024906, 0.24902490249024906, 0.24902490249024906, 0.24902490249024906, 0.25810324129651857, 0.25810324129651857, 0.25810324129651857, 0.25810324129651857, 0.25810324129651857, 0.2764423076923077, 0.2857142857142857, 0.2950622240064232, 0.3044920108531806, 0.2950622240064232, 0.2950622240064232, 0.2857142857142857, 0.2950622240064232, 0.2950622240064232, 0.2950622240064232, 0.2764423076923077, 0.2764423076923077, 0.2764423076923077, 0.25810324129651857, 0.25810324129651857, 0.2764423076923077, 0.26724051646481833, 0.26724051646481833, 0.26724051646481833, 0.26724051646481833, 0.26724051646481833, 0.26724051646481833, 0.25810324129651857, 0.26724051646481833, 0.26724051646481833, 0.26724051646481833, 0.25810324129651857, 0.26724051646481833, 0.26724051646481833, 0.26724051646481833, 0.26724051646481833, 0.26724051646481833, 0.26724051646481833, 0.26724051646481833, 0.25810324129651857, 0.231023102310231, 0.22000000000000003, 0.22000000000000003, 0.20208083233293322, 0.22902290229022898, 0.22000000000000003, 0.20902090209020907, 0.20000000000000007, 0.20902090209020907, 0.20902090209020907, 0.20902090209020907, 0.20902090209020907, 0.22720448403563204, 0.23637820512820507, 0.23637820512820507, 0.22720448403563204, 0.23637820512820507, 0.23637820512820507, 0.2549177037334404, 0.24561403508771934, 0.23637820512820507, 0.22720448403563204, 0.22720448403563204, 0.23637820512820507, 0.22720448403563204, 0.22720448403563204, 0.23637820512820507, 0.2549177037334404, 0.2549177037334404, 0.24561403508771934, 0.24561403508771934, 0.23637820512820507, 0.23637820512820507, 0.23637820512820507, 0.23637820512820507, 0.2642950457240479, 0.2549177037334404, 0.2549177037334404, 0.2642950457240479, 0.2642950457240479, 0.2642950457240479, 0.24561403508771934, 0.2642950457240479, 0.27375201288244766, 0.27375201288244766, 0.2642950457240479, 0.2549177037334404, 0.2549177037334404, 0.2549177037334404, 0.23637820512820507, 0.23637820512820507, 0.2549177037334404, 0.27375201288244766, 0.24561403508771934, 0.24561403508771934, 0.2549177037334404, 0.2549177037334404, 0.2549177037334404, 0.2549177037334404, 0.24561403508771934, 0.24561403508771934, 0.24561403508771934, 0.24561403508771934, 0.2549177037334404, 0.2549177037334404, 0.2549177037334404, 0.2642950457240479, 0.2642950457240479, 0.24561403508771934, 0.23637820512820507, 0.23637820512820507, 0.21808723489395754, 0.22720448403563204, 0.22720448403563204, 0.22720448403563204, 0.22720448403563204, 0.22720448403563204, 0.22720448403563204, 0.24561403508771934, 0.24561403508771934, 0.23637820512820507, 0.22720448403563204, 0.22720448403563204, 0.23637820512820507, 0.23637820512820507, 0.22720448403563204, 0.22720448403563204, 0.22720448403563204, 0.22720448403563204, 0.22720448403563204, 0.21808723489395754, 0.20902090209020907, 0.20000000000000007, 0.20000000000000007, 0.18000000000000005, 0.16000000000000003, 0.16000000000000003, 0.16901690169016903, 0.17807122849139662, 0.16901690169016903, 0.16901690169016903, 0.16901690169016903, 0.16901690169016903, 0.16901690169016903, 0.17807122849139662, 0.17807122849139662, 0.18716845160644574, 0.17807122849139662, 0.18716845160644574, 0.17807122849139662, 0.17807122849139662, 0.16901690169016903, 0.17807122849139662, 0.18716845160644574, 0.18716845160644574, 0.18716845160644574, 0.1963141025641026, 0.20551378446115282, 0.22409808059491515, 0.22409808059491515, 0.23349436392914652, 0.23349436392914652, 0.22409808059491515, 0.22409808059491515, 0.22409808059491515, 0.22409808059491515, 0.22409808059491515, 0.21477318346045765, 0.21477318346045765, 0.21477318346045765, 0.23349436392914652, 0.23349436392914652, 0.22409808059491515, 0.21477318346045765, 0.20551378446115282, 0.20551378446115282, 0.20551378446115282, 0.20551378446115282, 0.20551378446115282, 0.21477318346045765, 0.21477318346045765, 0.20551378446115282, 0.20551378446115282, 0.21477318346045765, 0.22409808059491515, 0.22409808059491515, 0.21477318346045765, 0.21477318346045765, 0.21477318346045765, 0.20551378446115282, 0.1963141025641026, 0.20551378446115282, 0.20551378446115282, 0.20551378446115282, 0.1963141025641026, 0.1963141025641026, 0.1963141025641026, 0.18716845160644574, 0.18716845160644574, 0.1963141025641026, 0.1963141025641026, 0.18716845160644574, 0.18716845160644574, 0.1963141025641026, 0.18716845160644574, 0.18716845160644574, 0.18716845160644574, 0.18716845160644574, 0.17807122849139662, 0.16901690169016903, 0.16000000000000003, 0.16000000000000003, 0.15101510151015102, 0.14, 0.12, 0.12, 0.13805522208883558, 0.13805522208883558, 0.13805522208883558, 0.13805522208883558, 0.14713241917725955, 0.14713241917725955, 0.14713241917725955, 0.14713241917725955, 0.15625, 0.13805522208883558, 0.13805522208883558, 0.13805522208883558, 0.129012901290129, 0.129012901290129, 0.12, 0.12, 0.12, 0.12, 0.129012901290129, 0.12, 0.12, 0.12, 0.12, 0.12, 0.10901090109010902, 0.10901090109010902, 0.09999999999999998, 0.09999999999999998, 0.09100910091009101, 0.09999999999999998, 0.09100910091009101, 0.09999999999999998, 0.09999999999999998, 0.10901090109010902, 0.09999999999999998, 0.11804721888755504, 0.12711440296266635, 0.14536340852130325, 0.16380263290121594, 0.16380263290121594, 0.1545564030509835, 0.14536340852130325, 0.14536340852130325, 0.14536340852130325, 0.14536340852130325, 0.14536340852130325, 0.13621794871794873, 0.12711440296266635, 0.12711440296266635, 0.14536340852130325, 0.14536340852130325, 0.1545564030509835, 0.1545564030509835, 0.16380263290121594, 0.16380263290121594, 0.17310789049919484, 0.17310789049919484, 0.1824780723863293, 0.19191919191919193, 0.20143739244862846, 0.20143739244862846, 0.21103896103896108, 0.22073034279320514, 0.22073034279320514, 0.22073034279320514, 0.22073034279320514, 0.23051815585475322, 0.24040920716112535, 0.23051815585475322, 0.24040920716112535, 0.23051815585475322, 0.22073034279320514, 0.22073034279320514, 0.22073034279320514, 0.23051815585475322, 0.23051815585475322, 0.20143739244862846, 0.20143739244862846, 0.19191919191919193, 0.1824780723863293, 0.1824780723863293, 0.17310789049919484, 0.17310789049919484, 0.17310789049919484, 0.16380263290121594, 0.17310789049919484, 0.16380263290121594, 0.17310789049919484, 0.17310789049919484, 0.16380263290121594, 0.16380263290121594, 0.1545564030509835, 0.14536340852130325, 0.14536340852130325, 0.14536340852130325, 0.1545564030509835, 0.14536340852130325, 0.14536340852130325, 0.14536340852130325, 0.14536340852130325, 0.13621794871794873, 0.12711440296266635, 0.12711440296266635, 0.12711440296266635, 0.11804721888755504, 0.12711440296266635, 0.12711440296266635, 0.12711440296266635, 0.11804721888755504, 0.10901090109010902, 0.13621794871794873, 0.13621794871794873, 0.14536340852130325, 0.14536340852130325, 0.12711440296266635, 0.12711440296266635, 0.13621794871794873, 0.14536340852130325, 0.1545564030509835, 0.1545564030509835, 0.1545564030509835, 0.14536340852130325, 0.13621794871794873, 0.14536340852130325, 0.13621794871794873, 0.13621794871794873, 0.13621794871794873, 0.13621794871794873, 0.12711440296266635, 0.13621794871794873, 0.12711440296266635, 0.12711440296266635, 0.13621794871794873, 0.14536340852130325, 0.14536340852130325, 0.14536340852130325, 0.13621794871794873, 0.12711440296266635, 0.12711440296266635, 0.12711440296266635, 0.11804721888755504, 0.10901090109010902, 0.10901090109010902, 0.11804721888755504, 0.11804721888755504, 0.12711440296266635, 0.12711440296266635, 0.11804721888755504, 0.11804721888755504, 0.10901090109010902, 0.11804721888755504, 0.13621794871794873, 0.14536340852130325, 0.12711440296266635, 0.14536340852130325] # true special 2

# for i in range(len(lst_y_1a)):
#     lst_x.append(200 * i)

# plt.axis([0, 100000, 0, 1])
# plt.plot(lst_x, lst_y_1a, 'b-')
# plt.plot(lst_x, lst_y_1b, 'r-')
# plt.plot(lst_x, lst_y_2a, 'g-')
# plt.plot(lst_x, lst_y_2b, 'y-')
# plt.xlabel("time")
# plt.ylabel("difference between the mole fractions of the solutes")
# # plt.legend(["normal", "overflow"])
# plt.legend(["normal 1", "overflow 1", "normal 2", "overflow 2"])
# plt.show()

# a = [0, 0, 0, 1, 1, 0, 0, 0]

# def f(x):
#     for i in x:
#         if i:
#             return True
#         print(i)
#     print("aaa")
#     return True

# f(a)

# test_file = shelve.open("epidemic_data")
# del(test_file["1"])
# print(len(test_file))
# for i in [5, 80, 23, 126, 37, 134, 16, 147, 58, 83, 70, 158]:
#     data_lst_1 = test_file[str(i)]
#     ax = plt.gca()
#     ax.set_xlim(0, 80)
#     ax.set_ylim(0, 501)
#     x_lst = data_lst_1[0]
#     y_lst = data_lst_1[1]
#     plt.xlabel("days")
#     plt.ylabel("number of people")
#     plt.plot(x_lst, y_lst[0], 'k-')
#     plt.plot(x_lst, y_lst[1], 'r-')
#     plt.plot(x_lst, y_lst[2], 'g-')
#     if y_lst[3][1] != 0:
#         plt.plot(x_lst, y_lst[3], 'm-')
#         plt.legend(["never infected and not vaccinated", "currently infected", "removed and not vaccinated", "vaccinated"])
#     else:
#         plt.legend(["never infected and not vaccinated", "currently infected", "removed and not vaccinated"])
# for i in range(10):
#     data_lst = test_file[str(i + 1)]
#     ax = plt.gca()
#     ax.set_ylim(0, 501)
#     x_lst = data_lst[0]
#     y_lst = data_lst[1]
#     plt.plot([0], [0], 'k-')
#     plt.plot([0], [1], 'r-')
#     plt.plot([0], [2], 'g-')
#     plt.legend(["never infected", "currently infected", "removed"])
#     try:
#         plt.plot(x_lst, y_lst[3], 'm-')
#     except:
#         pass
#     plt.show()
# test_file.close()

# no mask, no isolation, no asymptomatic and no vaccination (0 - 10)
# mask, no isolation, no asymptomatic and no vaccination (10 - 20)
# no mask, slow isolation, no asymptomatic and no vaccination (20 - 30)
# no mask, fast isolation, no asymptomatic and no vaccination (30 - 40)
# no mask, no isolation, no asymptomatic and vaccination (40 - 50)
# mask, slow isolation, no asymptomatic and no vaccination (50 - 60)
# mask, fast isolation, no asymptomatic and no vaccination (60 - 70)
# no mask, no isolation, asymptomatic and no vaccination (70 - 80)
# mask, slow isolation, asymptomatic and no vaccination (80 - 90)
# no mask, no isolation, asymptomatic and vaccination (90 - 100)
# mask, slow isolation, asymptomatic and vaccination (100 - 110)
# no mask, slow isolation, asymptomatic and vaccination (110 - 120)
# no mask, slow isolation, asymptomatic and no vaccination (120 - 130)
# no mask, fast isolation, asymptomatic and no vaccination (130 - 140)
# mask, no isolation, asymptomatic and no vaccination (140 - 150)
# mask, fast isolation, asymptomatic and no vaccination (150 - 160)

# 000 5
# 001 80
# 010 23
# 011 126
# 020 37
# 021 134
# 100 16
# 101 147
# 110 58
# 111 83
# 120 70
# 121 158

# never infected and not vaccinated, currently infected, removed and not vaccinated, vaccinated

# test_file = shelve.open("epidemic_data")
# max_days = 0
# for i in test_file:
#     if len(test_file[i][0]) > max_days:
#         max_days = len(test_file[i][0])
# print(max_days)
# test_file.close()

# print(2 != 1 != 2)

# print(str(True))
# print(str(False))

# if not(None):
#     print("abc")
# else:
#     print("def")

# print(not("000"))

# print("abcdef"[1:])

# print(type(math.sqrt(4)))

# print(None)
# print(None == True)
# print(None == False)
# print(not(None))
# print(not(None) == True)
# print(not(None) == False)
# print(not(not(None)))
# print(not(not(None)) == True)
# print(not(not(None)) == False)
# print(not(not(not(None))))
# print(not(not(not(None))) == True)
# print(not(not(not(None))) == False)

# mouse = pynput.mouse.Controller()
# for i in range(10):
#     print(mouse.position)
#     time.sleep(1)

# (1248, 491) "click to view"
# (1345, 52) "cutomise and contol google chrome"
# (1345, 336) "more tools"
# (958, 496) "developer tools"
# (11, 466) "inspect element"
# (676, 357) "screen centre"
# (159, 560) "more"
# (248, 576) "link"
# (318, 593) "open link in new tab"
# (1192, 624) "more"
# (1107, 530) "download"
# (1354, 466) "close developer tools"
# one down arrow moves 40 pixels
# 62 pixels between one "click to view" and the next "click to view"
# do two, down arrow thrice

# mouse.position = (200, 100)
# mouse.move(20, 20)
# mouse.click(Button.left, 2)
# mouse.press(Button.left)
# mouse.move(40, 0)
# time.sleep(0.1)
# mouse.release(Button.left)

# (24, 712)

# keyboard = pynput.keyboard.Controller()

# time.sleep(5)
# keyboard.press("a")
# keyboard.release("a")
# keyboard.type("Whales are not fish, and they must regularly get back to the surface to breathe. There are many types of whales, each with their own characteristics and vastly different sizes. The most famous by far is the blue whale, the largest animal to have ever lived on this planet. Longer than a tennis court, it also holds the record for the most powerful call in the animal kingdom, which is louder than a jet engine.")
# keyboard.type("The landlady informed me that he had left the house shortly after eight o'clock in the morning. I sat down beside the fire, however, with the intention of awaiting him, however long he might be. I was already deeply interested in his inquiry, for, though it was surrounded by none of the grim and strange features which were associated with the two crimes which I have already recorded, still, the nature of the case and the exalted station of his client gave it a character of its own.")

# "css-z6vxiy e6yfngs3"
# "https://humanbenchmark.com/tests/aim"

# print("28482 23882 18833 18222".split(" "))
# tm_lst = [1, 3, 20]
# tm_lst.reverse()
# print(sum (60 ** i * tm_lst[i] for i in range(len(tm_lst))))

# print(time.process_time())

# if 7 - 1 < 7 < 7 + 1:
#     for i in range(2):
#         tm_lst = time.strftime("%S %M %H", time.localtime()).split(" ")
#         print([sum (60 ** i * int(tm_lst[i]) for i in range(len(tm_lst)))])
#         # print(time.strftime(int("%H") * 3600 + int("%M") * 60 + int("%S"), time.localtime()))

# print(time.process_time())

# print(end.encrypt("botpassword123", "1011100000011101100001101011110101000000100101010001011110010001101100001011101101000110011100101001100010111000011001100111101001001110101011110100001110000000000010101001011011101000010110000101101100010011001001101110000000000000111110011110111011100101"))

# print(end.decrypt("6Q3G8HMSA42C4XEN5B2MEL017B2QA5XRFIBP", "1011100000011101100001101011110101000000100101010001011110010001101100001011101101000110011100101001100010111000011001100111101001001110101011110100001110000000000010101001011011101000010110000101101100010011001001101110000000000000111110011110111011100101"))
# "6Q3G8HMSA42C4XEN5B2MEL017B2QA5XRFIBP"
# "97G8SDNRAVGLF6KAS5S1AJ"
# "1011100000011101100001101011110101000000100101010001011110010001101100001011101101000110011100101001100010111000011001100111101001001110101011110100001110000000000010101001011011101000010110000101101100010011001001101110000000000000111110011110111011100101"

# if not 0:
#     print(128 / 3.13)

# lst = [[0, 0], [0, 0]]

# def func(r, c, l):
#     saved_lst = l.copy()
#     saved_lst[r][c] = 1

# func(0, 0, lst.copy())
# for i in lst:
#     print(i)
# print()
# func(1, 1, lst.copy())
# for i in lst:
#     print(i)

# def is_reachable(start_board, end_board):
#     if start_board[1][1] != end_board[1][1]: # centre
#         return False
#     elif (sum([x.count("B") for x in start_board]) + sum([x.count("W") for x in start_board]) == 8) and start_board != end_board:
#         return False
#     else:
#         s = ""
#         if start_board[0][0] != "_":
#             s += start_board[0][0]
#         if start_board[2][1] != "_":
#             s += start_board[2][1]
#         if start_board[0][2] != "_":
#             s += start_board[0][2]
#         if start_board[1][0] != "_":
#             s += start_board[1][0]
#         if start_board[2][2] != "_":
#             s += start_board[2][2]
#         if start_board[0][1] != "_":
#             s += start_board[0][1]
#         if start_board[2][0] != "_":
#             s += start_board[2][0]
#         if start_board[1][2] != "_":
#             s += start_board[1][2]

#         e = ""
#         if end_board[0][0] != "_":
#             e += end_board[0][0]
#         if end_board[2][1] != "_":
#             e += end_board[2][1]
#         if end_board[0][2] != "_":
#             e += end_board[0][2]
#         if end_board[1][0] != "_":
#             e += end_board[1][0]
#         if end_board[2][2] != "_":
#             e += end_board[2][2]
#         if end_board[0][1] != "_":
#             e += end_board[0][1]
#         if end_board[2][0] != "_":
#             e += end_board[2][0]
#         if end_board[1][2] != "_":
#             e += end_board[1][2]

#         if len(s) != len(e):
#             return False
#         else:
#             temp = s
#             for i in range(len(s)):
#                 if temp == e:
#                     return True
#                 else:
#                     temp = temp[1:] + temp[0]
#             return False

# print(is_reachable(
#             [ ['_', '_', 'W'],
#               ['_', '_', '_'],
#               ['_', '_', '_'] 
#             ],[
#               ['_', '_', 'B'], 
#               ['_', '_', '_'],
#               ['_', '_', '_'] 
#             ]))

# arr = np.arange(120).reshape((12, 10))

# print(arr)

# pos = (5, 8)

# print(np.reshape(arr[[pos[1] - 1, pos[1], pos[1] + 1], :][:, [pos[0] - 1, pos[0], pos[0] + 1]], 9))
# print(arr[3: 5, -1])

# print(arr[[2, 3], :][:, [0, 1]])

# print(np.average([7, 9, 2, 4, 6], weights = [0, 1, 2, 3, 4]))
# print((9 + 4 + 12 + 24) / 10)

# x = range(20)
# y_exp = [1.0, 2.0, 2.5, 3.0, 3.375, 3.75, 4.0625, 4.375, 4.6484375, 4.921875, 5.16796875, 5.4140625, 5.6396484375, 5.865234375, 6.07470703125, 6.2841796875, 6.480560302734375, 6.67694091796875, 6.8624114990234375, 7.047882080078125]
# # y_the_1 = [math.sqrt((i + 1) ** 2 - 1) for i in x]
# # y_the_2 = [math.sqrt(i) + 1 for i in x]
# # y_the_3 = [i ** (1 - 1 / math.e) + 1 for i in x]
# y_the_4 = [i ** ((math.sqrt(5) - 1)/ 2) + 1 for i in x]
# # y_the_5 = [i ** 0.6 + 1 for i in x]

# plt.plot(x, y_exp, label = "exp")
# # plt.plot(x, y_the_1, label = "hyperbola")
# # plt.plot(x, y_the_2, label = "sqrt")
# # plt.plot(x, y_the_3, label = "pwr (1 - 1 / e)")
# plt.plot(x, y_the_4, label = "pwr (phi - 1)")
# # plt.plot(x, y_the_5, label = "pwr 0.6")
# plt.legend()
# plt.show()

# flattened_grid = [1, 1, 1, 1, 0, 0, 0, 1, 1]
# arr = np.array(flattened_grid)
# lst = list(arr)
# print(lst)
# for i in range(len(flattened_grid)):
#     if not(flattened_grid[i]): # 1st black found
#         break

# for j in range(i, len(flattened_grid)):
#     if flattened_grid[j]: # not black found
#         break
# else:
#     j = 0
# print(j)

# if None == None:
#     print("n = n")

# print(len("686ErpVB3IYx9yEaSPW_Tg"))

# arr = np.array([[5, 5, 5, 12], [7, 9, 9, 12], [1, 1, 0, -7], [-7, 2, 4, 3]])

# # cnt = dict(collections.Counter(arr))
# # print(arr[:, -1])
# # arr *= -1
# print(arr)
# arr[2][2] += 100
# print(arr)

# a = np.array([[[10, 7, 9], [12, -3.3, 4]], [[2, 4, 5], [-1, 0, 1.5]], [[0.5, -0.5, 1], [0, 0, 2]]])
# b = np.array([[[10, 7, 9], [12, -3.3, 4]], [[2, 4, 5], [-1, 0, 1.5]], [[0.5, -0.5, 1], [0, 0, 9]]])
# print(type(list(a)[0]))

# a = np.array(np.array([1, 1, 1]))

# print(a - 1)

# print(type(a.shape))

# print(" ".join(["5", "6", "7"]) + "nxnxn")

# a = {"a": True, "d": False}

# for i in a:
#     print(i)

# def on_press(key):
#     try:
#         # print('alphanumeric key {0} pressed'.format(
#         #     key.char))
#         return 'alphanumeric key {0} pressed'.format(
#             key.char)
#     except AttributeError:
#         # print('special key {0} pressed'.format(
#         #     key))
#         pass

# def on_release(key):
#     print('{0} released'.format(
#         key))
#     if key == pynput.keyboard.Key.esc:
#         # Stop listener
#         return False

# # Collect events until released
# with pynput.keyboard.Listener(
#         on_press=on_press,
#         on_release=on_release) as listener:
#     listener.join()

# ...or, in a non-blocking fashion:
# listener = pynput.keyboard.Listener(
#     on_press=on_press,
#     on_release=on_release)
# listener.start()

# a = np.array([[[10, 7, 9], [12, -3.3, 4]], [[2, 4, 5], [-1, 0, 1.5]], [[0.5, -0.5, 1], [0, 0, 2]]])
# print(a + np.array([-10, 5, 6]))

# rng = np.random.default_rng()

# a = []
# b = []

# a = rng.integers(-100, 100, (10, 10))
# b = rng.integers(-100, 100, (10, 10))

# a = np.array([[1, 2, 3, 4, 5],
#               [6, 7, 8, 9, 10],
#               [11, 12, 17, 86, 90]])

# a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])
# b = np.array([-5, 2, 7, 2.3, 11, 17, 8, 2, 0.5, 1])

# print(a * b)
# print(a)
# print("here")
# start_time = time.time()
# m_1 = mat.mult(a, b)
# print(time.time() - start_time)
# print("here")
# start_time = time.time()
# m_2 = np.matmul(a, b)
# print(time.time() - start_time)

# p = [(341, 87), (341, 88), (340, 90), (328, 97), (300, 101), (266, 101), (239, 101), (208, 101), (197, 101), (192, 102), (195, 112), (201, 134), (204, 156), (204, 180), (206, 215), (211, 252), (214, 285), (214, 300), (214, 300), (214, 317), (215, 356), (216, 379), (217, 398), (216, 414), (216, 441), (217, 465), (208, 481), (195, 505), (193, 523), (193, 523), (191, 561), (191, 572), (200, 579), (227, 582), (244, 575), (262, 557), (278, 522), (291, 468), (296, 445), (295, 447), (287, 482), (287, 519), (295, 554), (313, 575), (340, 584), (363, 585), (376, 575), (387, 556), (389, 525), (370, 479), (359, 463), (355, 444), (355, 444), (355, 420), (355, 350), (352, 318), (352, 316), (352, 316), (347, 282), (345, 236), (344, 191), (344, 155), (344, 124), (343, 109), (343, 95), (341, 91), (332, 95), (308, 108), (284, 112), (241, 112), (205, 110), (196, 103), (193, 89), (201, 79), (212, 64), (215, 54), (215, 54), (215, 54), (219, 44), (228, 37), (238, 24), (244, 16), (251, 14), (260, 15), (263, 21), (263, 28), (263, 27), (263, 15), (264, 9), (273, 8), (289, 10), (302, 13), (313, 21), (326, 34), (339, 51), (343, 61), (344, 74), (344, 88)]
# p = [(295, 112), (294, 112), (284, 112), (264, 114), (247, 120), (231, 129), (217, 142), (201, 162), (193, 186), (191, 219), (193, 244), (202, 268), (222, 299), (248, 320), (276, 339), (298, 352), (324, 369), (345, 386), (367, 407), (380, 425), (390, 441), (398, 457), (401, 473), (402, 486), (402, 494), (400, 498), (397, 501), (391, 505), (386, 509), (371, 512), (347, 515), (329, 516), (313, 516), (278, 513), (259, 509), (243, 504), (226, 500), (215, 493), (199, 478), (192, 468), (186, 456), (185, 450), (186, 442), (194, 429), (212, 408), (230, 389), (259, 363), (286, 341), (315, 309), (332, 278), (339, 259), (343, 246), (343, 237), (342, 225), (340, 217), (335, 206), (325, 188), (318, 175), (309, 163), (297, 151), (281, 143), (253, 137), (237, 136), (231, 136)]
# p_1 = 3.25
# theta_arr = np.array([math.atan2(x[1], x[0]) for x in p])
# radius_arr = np.array([math.sqrt(x[0] ** 2 + x[1] ** 2) for x in p])
# radius_arr = 6.4 / np.max(radius_arr) * radius_arr
# alpha_arr = 2 * np.arccos(radius_arr / (2 * p_1))
# theta_1_arr = (theta_arr + (alpha_arr - np.pi) / 2) / DEGREES
# theta_2_arr = (np.pi - alpha_arr) / DEGREES

# print(len(p), '\n\n\n')
# print([round(x) for x in theta_1_arr], '\n\n\n')
# print([round(x) for x in theta_2_arr])

# print([round(math.atan2(x[1], x[0]) / DEGREES) for x in p])
# print(list(6.4 / np.max(temp_arr) * temp_arr))
# print(len([3.159275875445104, 3.149917673751313, 3.0565635843468932, 2.879103161797904, 2.7493945617055364, 2.648992340856842, 2.596458045289785, 2.5846947734268233, 2.683636889156228, 2.9094087053400393, 3.1147952639351106, 3.360072626391313, 3.7285521680888163, 4.0534073877439045, 4.376756778952555, 4.617611495062819, 4.916515415867541, 5.183342301984725, 5.486945173596006, 5.707998653064111, 5.894240520622296, 6.067477220948559, 6.208555853139448, 6.31477481000738, 6.376698237652993]))
# print([math.sqrt(x[0] ** 2 + x[1] ** 2) for x in p])
# p = [21, 21, 22, 23, 26, 29, 33, 39, 44, 49, 52, 53, 53, 52, 51, 50, 49, 48, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 54, 56, 57, 59, 62, 63, 64, 66, 66, 67, 68, 68, 68, 67, 66, 63, 59, 54, 50, 44, 40, 37, 36, 35, 33, 33, 32, 30, 29, 28, 27, 27, 28, 30, 30]
# print(len(p))

# def rotateX(t: float | int):
#     return [[1, 0, 0], [0, math.cos(t), math.sin(t)], [0, -math.sin(t), math.cos(t)]]

# def rotateY(t: float | int):
#     return [[math.cos(t), 0, math.sin(t)], [0, 1, 0], [-math.sin(t), 0, math.cos(t)]]

# def rotateZ(t: float | int):
#     return [[math.cos(t), math.sin(t), 0], [-math.sin(t), math.cos(t), 0], [0, 0, 1]]

# b = mat.mult(rotateX(math.pi / 4), mat.mult(rotateZ(math.atan(math.sqrt(2))), mat.mult(rotateX(math.sqrt(3) / 2 * math.pi), mat.mult(rotateZ(math.atan(-math.sqrt(2))), rotateX(-math.pi / 4)))))
# for i in b:
#     print(i)
# q = math.sqrt(3) * math.pi / 2
# print(1 / 3 + 2 / 3 * math.cos(q))

# d = {"w": True, "a": False}

# for i in d:
#     print(i)

# a = []
# b = []
# b.append(1)
# a.append(b.copy())
# b = []
# print(a)

# Collect events until released

# ...or, in a non-blocking fashion:
# listener = pynput.keyboard.Listener(
#     on_press=on_press,
#     on_release=on_release)
# listener.start()
# a = [108, 97, 117,114,101,110,101,109,105,110,105,99,110,32,99,114,121,101,114,112,116,101,120,32,117,98,104,115,105,102]
# s = ""
# for i in a:
#     s += chr(i)
# print(s)

# print("Image\033[31m 31\033[0m on page\033[31m 17\033[0m has been saved.")

# positive ==> e
# negative ==> s
# tp = 165
# fp = 42
# fn = 56
# tn = 183
# total = 446

# print(f"Positive correctness: {tp / (tp + fn)}")
# print(f"Negative correctness: {tn / (tn + fp)}")


# fp = open("test_file_1.txt", 'r')
# for i in range(5):
#     print(fp.readline())
# fp.close()

# a = [5, 6, 7, 8, 9, 10, 11, 12]
# print(a[:3])

# image_links = ["ne", "nd", "nc", "nb", "na"]
# print(image_links[:100])
# left_edge_links = ["oa", "ob", "oc"]
# right_edge_links = ["oa", "ob", "oc"]
# left_edge_links = image_links[:3] + left_edge_links
# right_edge_links = image_links[-1:-4:-1] + right_edge_links
# print(right_edge_links)

# def isPrime(n):
#     if n == 1:
#         return False
#     for i in range(2, math.floor(math.sqrt(n) + 1)):
#         if not(n % i):
#             return False
#     return True

# ln_p = np.log(np.array([k for k in range(2, 100) if isPrime(k)]))

# fp = open("zeta_zeroes.txt", 'r')
# temp = fp.readlines()
# fp.close()
# all_t = [float(i.split(" ")[1][:-1]) for i in temp]

# x = np.linspace(0.1, 4.6, 10000)
# sigma = 0.5
# y_re = np.zeros(x.size)
# y_im = np.zeros(x.size)
# dips = np.zeros(ln_p.size)
# for t in all_t:
#     y_re += (np.e ** (-sigma * x) - np.cos(t * x)) / (2 * (np.cos(t * x) - np.cosh(sigma * x)))
#     y_im += np.sin(t * x) / (2 * (np.cos(t * x) - np.cosh(sigma * x)))
#     dips += (np.e ** (-sigma * ln_p) - np.cos(t * ln_p)) / (2 * (np.cos(t * ln_p) - np.cosh(sigma * ln_p)))

# plt.axhline(0, 0, 1, c = 'k')
# # plt.grid(True, which = "major", axis = "both")
# # plt.plot(x, y_re, label = "Re", c = 'r')
# # plt.scatter(ln_p, dips, label = "natural logarithm of primes", c = 'g')
# plt.plot(x, y_im, label = "Im", c = 'b')
# plt.scatter(ln_p, np.zeros(ln_p.size), label = "natural logarithm of primes", c = 'g')
# # plt.legend()
# plt.xlabel("x")
# plt.ylabel("y")
# plt.xlim(0.1, 4.6)
# plt.ylim(-30, 30)
# plt.show()

# fp = open("fast_and_consistent_download/category_2/category_2_links.txt", 'r')
# txt = fp.readlines()[0]
# fp.close()

# print(txt.split("%")[1])
# print(txt.split("/")[4])



# freq = 2
# unit_of_tm = 1
# RATE = 16
# temp = 2 ** 14 * np.sin(2 * np.pi * freq * np.linspace(0, unit_of_tm, int(RATE * unit_of_tm)))

# plt.figure(figsize=(10, 5))
# plt.plot(np.linspace(0, unit_of_tm, int(RATE * unit_of_tm)), temp)
# plt.title('Audio')
# plt.ylabel('Signal Value')
# plt.xlabel('Time (s)')
# plt.xlim(0, 1.1 * unit_of_tm)
# plt.show()

# for i in temp:
#     i = chr(round(i))
#     print(i)

# a = [4, 5, 7, 6]
# b = np.array([6, 5, 7, 6])

# a += list(b)
# print(a)

# record for 5 seconds
# process and check for the noise lvls
# if noise lvl more then threshold
# then update a .txt file
# arduino checks the file
# arduino outputs accordingly

# noise = PerlinNoise(octaves = 8)

# print("abc")

# plt.figure()
# x = np.linspace(0, 2, 200)
# y = [noise(i) for i in x]
# plt.plot(x, y)
# plt.show()
# a.show()

# im = Image.open(f"ai_dataset_3/category_0_formatted/category_0_formatted_img_{0}.png", 'r')
# print(" ".join(list(im.getdata())[0]))
# im.close()

# all_squares_vel = np.zeros((10, 10, 2))
# all_squares_vel[5][6] = np.array([2, 3])

# i = 5
# j = 6
# grid = np.array([[(0, 0), all_squares_vel[i - 1][j], (0, 0)],
#                              [all_squares_vel[i][j - 1], (0, 0), all_squares_vel[i][j + 1]],
#                              [(0, 0), all_squares_vel[i + 1][j], (0, 0)]]) - all_squares_vel[i][j]
# print(grid[:, :, 0])

# fp = open("test_file_1.txt", 'r')
# a = np.array(fp.readlines(), dtype=np.float64)
# print(a.size)
# print(a)
# # print(np.array(fp.readlines(), dtype=np.int16))
# fp.close()

# a = np.arange(100)
# b = np.arange(100, 200)
# a.resize((100, 1))
# b.resize((100, 1))

# np.random.seed(10)
# np.random.shuffle(a)
# np.random.seed(10)
# np.random.shuffle(b)

# print(b - a)

# a = np.array([0, 255, 1, 4, 7, 2, 8, 100, 54, 162, 199, 200, 201, 101, 54, 32], dtype=np.float64)

# a /= 255
# print(a)

# def myfunc(a, b):
#     return a + b

# x = lambda a, b : a + b
# y = myfunc
# print(x(6, 9))
# print(y(6, 9))
# print(x(7, 12))
# print(y(7, 12))

# t = int(input())

# for i in range(t):
#     s = input()
#     pts = 0
#     done = False
#     while not(done):
#         n_0 = -1
#         n_1 = -1
#         for j in range(len(s)):
#             if s[j] == '0':
#                 n_0 = j
#                 break
#         if n_0 == -1:
#             done = True
#             continue
#         for j in range(n_0, len(s)):
#             if s[j] == '1':
#                 n_1 = j
#                 break
#         if n_0 != -1 and n_1 != -1:
#             s = s[:n_0] + s[n_0 + 1:n_1] + s[n_1 + 1:]
#         else:
#             done = True
#             continue
	
#         n_0 = -1
#         n_1 = -1
#         for j in range(len(s)):
#             if s[j] == '0':
#                 n_0 = j
#                 break
#         if n_0 == -1:
#             done = True
#             continue
#         for j in range(len(s) - 1, n_0, -1):
#             if s[j] == '1':
#                 n_1 = j
#                 break
#         if n_0 != -1 and n_1 != -1:
#             s = s[:n_0] + s[n_0 + 1:n_1] + s[n_1 + 1:]
#             pts += 1
#         else:
#             done = True
#             continue
#     print(pts)

# n, k = [int(x) for x in input().split(" ")]
# lst = [int(x) for x in input().split(" ")]
# while len(lst) < k:
#     arg_max = 0
#     arg_sub_max = 0
#     for i in range(len(lst)):
#         if lst[i] >= lst[arg_max]:
#             arg_sub_max = arg_max
#             arg_max = i
#     lst[arg_max] / lst[arg_sub_max]
#     lst.append(lst[arg_max] // 2)
#     lst[arg_max] -= lst[-1]
# print(sum([x ** 2 for x in lst]))

# class Class1:
#     def __init__(self, a, b):
#         self.a = a
#         self.b = b
#         self.c = 0

# class Class2(Class1):
#     def __init_subclass__(cls) -> None:
#         return super().__init_subclass__()

# # code
# class Mammal1(object):

# 	def __init__(self, name):
# 		print(name, "Is a mammal1")


# class Mammal(object):

# 	def __init__(self, name):
# 		self.a = 1
# 		print(name, "Is a mammal")


# class canFly(Mammal1):

# 	def __init__(self, canFly_name):
# 		print(canFly_name, "cannot fly")

# 		# Calling Parent class
# 		# Constructor
# 		super().__init__(canFly_name)

# class canSwim(Mammal):

# 	def __init__(self, canSwim_name):

# 		print(canSwim_name, "cannot swim")

# 		super().__init__(canSwim_name)
# class canJump(Mammal):

# 	def __init__(self, jump_name):

# 		print(jump_name, "can jump")

# 		super().__init__(jump_name)

# class Animal(canFly, canSwim, canJump):

# 	def __init__(self, name):
# 		super(canSwim,self).__init__(name)

# # Driver Code
# Carol = Animal("Dog")

# class Base(object):
#     def __init__(self, *args, **kwargs):
#         pass

# class A(Base):
#     def __init__(self, *args, **kwargs):
#         print("A")
#         super(A, self).__init__(*args, **kwargs)

# class B(Base):
#     def __init__(self, *args, **kwargs):
#         print("B")
#         super(B, self).__init__(*args, **kwargs)

# class C(A):
#     def __init__(self, arg, *args, **kwargs):
#         print("C", "arg =",arg)
#         super(C, self).__init__(arg, *args, **kwargs)

# class D(B):
#     def __init__(self, arg, *args, **kwargs):
#         print("D", "arg =",arg)
#         super(D, self).__init__(arg, *args, **kwargs)

# class E(C,D):
#     def __init__(self, arg, *args, **kwargs):
#         print("E", "arg =",arg)
#         super(E, self).__init__(arg, *args, **kwargs)

# print("MRO:", [x.__name__ for x in E.__mro__])
# E(10)

# s = ["1.0 6.97 0.001000 129.19 29.302 2355.2 2384.5 29.303 2484.4 2513.7 0.1059 8.8690 8.9749",
# "1.5 13.02 0.001001 87.964 54.686 2338.1 2392.8 54.688 2470.1 2524.7 0.1956 8.6314 8.8270",
# "2.0 17.50 0.001001 66.990 73.431 2325.5 2398.9 73.433 2459.5 2532.9 0.2606 8.4621 8.7227",
# "2.5 21.08 0.001002 54.242 88.422 2315.4 2403.8 88.424 2451.0 2539.4 0.3118 8.3302 8.6421",
# "3.0 24.08 0.001003 45.654 100.98 2306.9 2407.9 100.98 2443.9 2544.8 0.3543 8.2222 8.5765",
# "4.0 28.96 0.001004 34.791 121.39 2293.1 2414.5 121.39 2432.3 2553.7 0.4224 8.0510 8.4734",
# "5.0 32.87 0.001005 28.185 137.75 2282.1 2419.8 137.75 2423.0 2560.7 0.4762 7.9176 8.3938",
# "7.5 40.29 0.001008 19.233 168.74 2261.1 2429.8 168.75 2405.3 2574.0 0.5763 7.6738 8.2501",
# "10 45.81 0.001010 14.670 191.79 2245.4 2437.2 191.81 2392.1 2583.9 0.6492 7.4996 8.1488",
# "15 53.97 0.001014 10.020 225.93 2222.1 2448.0 225.94 2372.3 2598.3 0.7549 7.2522 8.0071"]

s = ["0.01 0.6117 0.001000 206.00 0.000 2374.9 2374.9 0.001 2500.9 2500.9 0.0000 9.1556 9.1556",
"5 0.8725 0.001000 147.03 21.019 2360.8 2381.8 21.020 2489.1 2510.1 0.0763 8.9487 9.0249",
"10 1.2281 0.001000 106.32 42.020 2346.6 2388.7 42.022 2477.2 2519.2 0.1511 8.7488 8.8999",
"15 1.7057 0.001001 77.885 62.980 2332.5 2395.5 62.982 2465.4 2528.3 0.2245 8.5559 8.7803",
"20 2.3392 0.001002 57.762 83.913 2318.4 2402.3 83.915 2453.5 2537.4 0.2965 8.3696 8.6661",
"25 3.1698 0.001003 43.340 104.83 2304.3 2409.1 104.83 2441.7 2546.5 0.3672 8.1895 8.5567",
"30 4.2469 0.001004 32.879 125.73 2290.2 2415.9 125.74 2429.8 2555.6 0.4368 8.0152 8.4520",
"35 5.6291 0.001006 25.205 146.63 2276.0 2422.7 146.64 2417.9 2564.6 0.5051 7.8466 8.3517",
"40 7.3851 0.001008 19.515 167.53 2261.9 2429.4 167.53 2406.0 2573.5 0.5724 7.6832 8.2556",
"45 9.5953 0.001010 15.251 188.43 2247.7 2436.1 188.44 2394.0 2582.4 0.6386 7.5247 8.1633",
"50 12.352 0.001012 12.026 209.33 2233.4 2442.7 209.34 2382.0 2591.3 0.7038 7.3710 8.0748",
"55 15.763 0.001015 9.5639 230.24 2219.1 2449.3 230.26 2369.8 2600.1 0.7680 7.2218 7.9898",
"60 19.947 0.001017 7.6670 251.16 2204.7 2455.9 251.18 2357.7 2608.8 0.8313 7.0769 7.9082",
"65 25.043 0.001020 6.1935 272.09 2190.3 2462.4 272.12 2345.4 2617.5 0.8937 6.9360 7.8296",
"70 31.202 0.001023 5.0396 293.04 2175.8 2468.9 293.07 2333.0 2626.1 0.9551 6.7989 7.7540",
"75 38.597 0.001026 4.1291 313.99 2161.3 2475.3 314.03 2320.6 2634.6 1.0158 6.6655 7.6812",
"80 47.416 0.001029 3.4053 334.97 2146.6 2481.6 335.02 2308.0 2643.0 1.0756 6.5355 7.6111",
"85 57.868 0.001032 2.8261 355.96 2131.9 2487.8 356.02 2295.3 2651.4 1.1346 6.4089 7.5435",
"90 70.183 0.001036 2.3593 376.97 2117.0 2494.0 377.04 2282.5 2659.6 1.1929 6.2853 7.4782",
"95 84.609 0.001040 1.9808 398.00 2102.0 2500.1 398.09 2269.6 2667.6 1.2504 6.1647 7.4151",
"100 101.42 0.001043 1.6720 419.06 2087.0 2506.0 419.17 2256.4 2675.6 1.3072 6.0470 7.3542",
"105 120.90 0.001047 1.4186 440.15 2071.8 2511.9 440.28 2243.1 2683.4 1.3634 5.9319 7.2952",
"110 143.38 0.001052 1.2094 461.27 2056.4 2517.7 461.42 2229.7 2691.1 1.4188 5.8193 7.2382",
"115 169.18 0.001056 1.0360 482.42 2040.9 2523.3 482.59 2216.0 2698.6 1.4737 5.7092 7.1829",
"120 198.67 0.001060 0.89133 503.60 2025.3 2528.9 503.81 2202.1 2706.0 1.5279 5.6013 7.1292",
"125 232.23 0.001065 0.77012 524.83 2009.5 2534.3 525.07 2188.1 2713.1 1.5816 5.4956 7.0771",
"130 270.28 0.001070 0.66808 546.10 1993.4 2539.5 546.38 2173.7 2720.1 1.6346 5.3919 7.0265",
"135 313.22 0.001075 0.58179 567.41 1977.3 2544.7 567.75 2159.1 2726.9 1.6872 5.2901 6.9773",
"140 361.53 0.001080 0.50850 588.77 1960.9 2549.6 589.16 2144.3 2733.5 1.7392 5.1901 6.9294",
"145 415.68 0.001085 0.44600 610.19 1944.2 2554.4 610.64 2129.2 2739.8 1.7908 5.0919 6.8827",
"150 476.16 0.001091 0.39248 631.66 1927.4 2559.1 632.18 2113.8 2745.9 1.8418 4.9953 6.8371",
"155 543.49 0.001096 0.34648 653.19 1910.3 2563.5 653.79 2098.0 2751.8 1.8924 4.9002 6.7927",
"160 618.23 0.001102 0.30680 674.79 1893.0 2567.8 675.47 2082.0 2757.5 1.9426 4.8066 6.7492",
"165 700.93 0.001108 0.27244 696.46 1875.4 2571.9 697.24 2065.6 2762.8 1.9923 4.7143 6.7067",
"170 792.18 0.001114 0.24260 718.20 1857.5 2575.7 719.08 2048.8 2767.9 2.0417 4.6233 6.6650",
"175 892.60 0.001121 0.21659 740.02 1839.4 2579.4 741.02 2031.7 2772.7 2.0906 4.5335 6.6242",
"180 1002.8 0.001127 0.19384 761.92 1820.9 2582.8 763.05 2014.2 2777.2 2.1392 4.4448 6.5841",
"185 1123.5 0.001134 0.17390 783.91 1802.1 2586.0 785.19 1996.2 2781.4 2.1875 4.3572 6.5447",
"190 1255.2 0.001141 0.15636 806.00 1783.0 2589.0 807.43 1977.9 2785.3 2.2355 4.2705 6.5059",
"195 1398.8 0.001149 0.14089 828.18 1763.6 2591.7 829.78 1959.0 2788.8 2.2831 4.1847 6.4678",
"200 1554.9 0.001157 0.12721 850.46 1743.7 2594.2 852.26 1939.8 2792.0 2.3305 4.0997 6.4302"]

# a = open("table_2.csv", 'w')

# b = csv.writer(a)
# for i in range(len(s)):
#     s[i] = s[i].split(" ")
#     # print(",".join(i.split(" ")))

# b.writerows(s)

# a.close()

# b = 5

# def func():
# 	a = b
# 	a += 2
# 	print("Inside: a =", a, "b =", b)
# 	masses = [1, 2, 3]
# 	all_pos = np.array([[1, 0, -7],
# 						[2, 5, 0],
# 						[-3, -2, 2]])
# 	all_vel = np.array([[1, 2, 3],
# 						[4, 5, 6],
# 						[7, 8, 9]])
# 	# print(np.linalg.norm(all_vel, axis=1) ** 2)
# 	all_p = np.transpose(np.multiply(masses, np.transpose(all_vel)))
# 	print(np.sum(all_p, axis=0))
# 	all_L_p = np.cross(all_pos, all_p, axis=1)
# 	print(all_L_p)
# 	net_angular_momentum = np.sum(all_L_p, axis=0)
# 	print(net_angular_momentum)

# func()
# print("Outside: b =", b)

if 1 < 2 or 3 < 1:
	print("1")

if 1 <= (2 or 3) <= 3:
	print("2")

print((2 or 3))